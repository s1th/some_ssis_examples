<?xml version="1.0"?><DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts" DTS:ExecutableType="MSDTS.Package.1"><DTS:Property DTS:Name="PackageFormatVersion">2</DTS:Property><DTS:Property DTS:Name="VersionComments"></DTS:Property><DTS:Property DTS:Name="CreatorName">CITNET\Brendan Nolan</DTS:Property><DTS:Property DTS:Name="CreatorComputerName">LIVXPL-1NQ9GQ1</DTS:Property><DTS:Property DTS:Name="CreationDate" DTS:DataType="7">1/19/2012 11:34:52 AM</DTS:Property><DTS:Property DTS:Name="PackageType">5</DTS:Property><DTS:Property DTS:Name="ProtectionLevel">1</DTS:Property><DTS:Property DTS:Name="MaxConcurrentExecutables">-1</DTS:Property><DTS:Property DTS:Name="PackagePriorityClass">0</DTS:Property><DTS:Property DTS:Name="VersionMajor">1</DTS:Property><DTS:Property DTS:Name="VersionMinor">0</DTS:Property><DTS:Property DTS:Name="VersionBuild">101</DTS:Property><DTS:Property DTS:Name="VersionGUID">{FF9714B4-B4DD-46C8-BED2-9A638E2917F7}</DTS:Property><DTS:Property DTS:Name="EnableConfig">0</DTS:Property><DTS:Property DTS:Name="CheckpointFileName"></DTS:Property><DTS:Property DTS:Name="SaveCheckpoints">0</DTS:Property><DTS:Property DTS:Name="CheckpointUsage">0</DTS:Property><DTS:Property DTS:Name="SuppressConfigurationWarnings">0</DTS:Property>
<DTS:ConnectionManager><DTS:Property DTS:Name="DelayValidation">0</DTS:Property><DTS:Property DTS:Name="ObjectName">crplivatu01.ATU</DTS:Property><DTS:Property DTS:Name="DTSID">{6AE63389-E2A5-42FF-AF78-7A77F39622C3}</DTS:Property><DTS:Property DTS:Name="Description"></DTS:Property><DTS:Property DTS:Name="CreationName">OLEDB</DTS:Property><DTS:ObjectData><DTS:ConnectionManager><DTS:Property DTS:Name="Retain">0</DTS:Property><DTS:Property DTS:Name="ConnectionString">Data Source=crplivatu01;Initial Catalog=ATU;Provider=SQLNCLI.1;Integrated Security=SSPI;Auto Translate=False;</DTS:Property></DTS:ConnectionManager></DTS:ObjectData></DTS:ConnectionManager>
<DTS:ConnectionManager><DTS:Property DTS:Name="DelayValidation">0</DTS:Property><DTS:Property DTS:Name="ObjectName">crplivatu01.ATU1</DTS:Property><DTS:Property DTS:Name="DTSID">{7AEF9675-66D1-4DB8-BD20-B625E834BDD5}</DTS:Property><DTS:Property DTS:Name="Description"></DTS:Property><DTS:Property DTS:Name="CreationName">ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</DTS:Property><DTS:ObjectData><DTS:ConnectionManager><DTS:Property DTS:Name="ConnectionString">Data Source=crplivatu01;Initial Catalog=ATU;Integrated Security=True;</DTS:Property></DTS:ConnectionManager></DTS:ObjectData></DTS:ConnectionManager>
<DTS:PackageVariable><DTS:Property DTS:Name="PackageVariableValue" DTS:DataType="8">&lt;Package xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dwd="http://schemas.microsoft.com/DataWarehouse/Designer/1.0"&gt;&lt;dwd:DtsControlFlowDiagram&gt;&lt;dwd:BoundingLeft&gt;892&lt;/dwd:BoundingLeft&gt;&lt;dwd:BoundingTop&gt;-582&lt;/dwd:BoundingTop&gt;&lt;dwd:Layout&gt;&lt;dds&gt;
  &lt;diagram fontclsid="{0BE35203-8F91-11CE-9DE3-00AA004BB851}" mouseiconclsid="{0BE35204-8F91-11CE-9DE3-00AA004BB851}" defaultlayout="Microsoft.DataWarehouse.Layout.GraphLayout" defaultlineroute="Microsoft.DataWarehouse.Layout.GraphLayout" version="7" nextobject="43" scale="100" pagebreakanchorx="0" pagebreakanchory="0" pagebreaksizex="0" pagebreaksizey="0" scrollleft="0" scrolltop="-1147" gridx="150" gridy="150" marginx="1000" marginy="1000" zoom="100" x="30665" y="24236" backcolor="15334399" defaultpersistence="2" PrintPageNumbersMode="3" PrintMarginTop="0" PrintMarginBottom="635" PrintMarginLeft="0" PrintMarginRight="0" marqueeselectionmode="1" mousepointer="0" snaptogrid="0" autotypeannotation="1" showscrollbars="0" viewpagebreaks="0" donotforceconnectorsbehindshapes="1" backpictureclsid="{00000000-0000-0000-0000-000000000000}"&gt;
    &lt;font&gt;
      &lt;ddsxmlobjectstreamwrapper binary="01010000900180380100065461686f6d61" /&gt;
    &lt;/font&gt;
    &lt;mouseicon&gt;
      &lt;ddsxmlobjectstreamwrapper binary="6c74000000000000" /&gt;
    &lt;/mouseicon&gt;
  &lt;/diagram&gt;
  &lt;layoutmanager&gt;
    &lt;ddsxmlobj /&gt;
  &lt;/layoutmanager&gt;
  &lt;ddscontrol controlprogid="MSDDS.Text" left="1212" top="-582" logicalid="21" controlid="1" masterid="0" hint1="0" hint2="0" width="4809" height="865" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00020000c9120000610300000300640000000500008000000000000000002a0001000004bc0220bf0200065461686f6d610e005000720065002d00700072006f00630065007300730069006e00670000000000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj /&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.1" left="1761" top="4761" logicalid="22" controlid="2" masterid="5" hint1="0" hint2="0" width="3677" height="1323" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="000800005d0e00002b050000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{2BB7606B-79D9-4850-BA2C-80E165AED273}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.1" left="1788" top="7487" logicalid="23" controlid="3" masterid="5" hint1="0" hint2="0" width="3598" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="000800000e0e00008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{BC695CF0-DDC7-4F57-9ED3-2C1D83C55850}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.1" tooltip="Store the AODate into a variable." left="1847" top="2168" logicalid="24" controlid="4" masterid="5" hint1="0" hint2="0" width="3598" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="000800000e0e00008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{D8A61257-A8E8-40D5-8AE5-EF5F5CDA40A2}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsContainerObjectManagedBridge.1" tooltip="Sequence Container" left="892" top="370" logicalid="25" controlid="5" masterid="0" hint1="0" hint2="0" width="5715" height="8944" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="0008000053160000f0220000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="Caption" value="Pre-processing Tasks" vartype="8" /&gt;
        &lt;property name="CaptionHeight" value="1164" vartype="3" /&gt;
        &lt;property name="Collapsed" value="0" vartype="11" /&gt;
        &lt;property name="CollapsedWidth" value="5715" vartype="3" /&gt;
        &lt;property name="LogicalObject" value="{65745A3F-6EC8-4B29-A0B4-2E4ABEBE1CF1}" vartype="8" /&gt;
        &lt;property name="RealHeight" value="0" vartype="3" /&gt;
        &lt;property name="RealWidth" value="0" vartype="3" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="3188" top="5685" logicalid="26" controlid="6" masterid="0" hint1="0" hint2="0" width="811" height="2302" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{5FCF3B31-1564-41BC-9367-455E2A278855}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector sourceid="2" destid="3" sourceattachpoint="7" destattachpoint="6" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="3599" y="6084" /&gt;
      &lt;point x="3599" y="6785" /&gt;
      &lt;point x="3587" y="6785" /&gt;
      &lt;point x="3587" y="7487" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="3200" top="2933" logicalid="27" controlid="7" masterid="0" hint1="0" hint2="0" width="846" height="2328" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{AC339480-911A-4071-B2BD-A9A587C8E897}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout" sourceid="4" destid="2" sourceattachpoint="7" destattachpoint="6" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="3646" y="3332" /&gt;
      &lt;point x="3646" y="4046" /&gt;
      &lt;point x="3599" y="4046" /&gt;
      &lt;point x="3599" y="4761" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.1" tooltip="Perform FAS13 testing for the Hydra instance." left="2212" top="12788" logicalid="28" controlid="8" masterid="9" hint1="0" hint2="0" width="3069" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000fd0b00008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{00E5B116-4EFE-47FA-BB19-60338DEFDE72}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsContainerObjectManagedBridge.1" tooltip="Sequence Container" left="970" top="10865" logicalid="29" controlid="9" masterid="0" hint1="0" hint2="0" width="28097" height="3919" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000c16d00004f0f0000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="Caption" value="FAS13 Testing Section" vartype="8" /&gt;
        &lt;property name="CaptionHeight" value="1164" vartype="3" /&gt;
        &lt;property name="Collapsed" value="0" vartype="11" /&gt;
        &lt;property name="CollapsedWidth" value="28097" vartype="3" /&gt;
        &lt;property name="LogicalObject" value="{EF173B76-7A3D-4D40-A28F-3A26C6BA03AA}" vartype="8" /&gt;
        &lt;property name="RealHeight" value="0" vartype="3" /&gt;
        &lt;property name="RealWidth" value="0" vartype="3" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="3350" top="8915" logicalid="30" controlid="10" masterid="0" hint1="0" hint2="0" width="12068" height="2450" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{1AE5BFC0-9FC9-4C9E-8A4C-CE08C56C1B18}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout" sourceid="5" destid="9" sourceattachpoint="11" destattachpoint="50" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="3749" y="9314" /&gt;
      &lt;point x="3749" y="10089" /&gt;
      &lt;point x="15018" y="10089" /&gt;
      &lt;point x="15018" y="10865" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.1" tooltip="FAS13 testing for the Rambo (Jacksonville) instance." left="6661" top="12772" logicalid="31" controlid="11" masterid="9" hint1="0" hint2="0" width="2778" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000da0a00008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{D4A0BE0C-8536-4D88-A6E4-81DB48197FED}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="4882" top="12955" logicalid="32" controlid="12" masterid="0" hint1="0" hint2="0" width="2079" height="815" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{8B73DC74-B7CC-41F0-A863-3C63E89DBED0}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout" sourceid="8" destid="11" sourceattachpoint="11" destattachpoint="10" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="5281" y="13370" /&gt;
      &lt;point x="5971" y="13370" /&gt;
      &lt;point x="5971" y="13354" /&gt;
      &lt;point x="6661" y="13354" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.1" tooltip="Perform FAS13 testing for ILHPUX (Canada) instance." left="10793" top="12770" logicalid="33" controlid="13" masterid="9" hint1="0" hint2="0" width="2593" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000210a00008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{4862020B-0550-47A4-A319-AC0530A0984D}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="9040" top="12953" logicalid="34" controlid="14" masterid="0" hint1="0" hint2="0" width="2053" height="801" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{43754DED-48AF-41DC-8085-216BEFF99237}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout" sourceid="11" destid="13" sourceattachpoint="11" destattachpoint="10" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="9439" y="13354" /&gt;
      &lt;point x="10116" y="13354" /&gt;
      &lt;point x="10116" y="13352" /&gt;
      &lt;point x="10793" y="13352" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.1" tooltip="Perform FAS13 testing for the Medusa (Europe) instance." left="14394" top="12743" logicalid="35" controlid="15" masterid="9" hint1="0" hint2="0" width="2513" height="1244" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000d1090000dc040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{822DC3FA-999A-4EB5-972A-224058B4494B}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="12987" top="12953" logicalid="36" controlid="16" masterid="0" hint1="0" hint2="0" width="1707" height="812" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{230E7E3B-BC3A-4EC4-9D84-E1396BBA7B83}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout" sourceid="13" destid="15" sourceattachpoint="11" destattachpoint="10" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="13386" y="13352" /&gt;
      &lt;point x="13890" y="13352" /&gt;
      &lt;point x="13890" y="13365" /&gt;
      &lt;point x="14394" y="13365" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.1" tooltip="Perform FAS13 testing for the Asia - HKGSINMALPRC (Asia - hong kong, singapore, malaysia, and china)..." left="18267" top="12771" logicalid="37" controlid="17" masterid="9" hint1="0" hint2="0" width="5001" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="00080000891300008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{E18E0CB6-A293-4314-B206-F9F44B960594}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="16508" top="12954" logicalid="38" controlid="18" masterid="0" hint1="0" hint2="0" width="2059" height="811" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{E7A384A6-94D4-42F9-94F4-4847585D87CF}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout" sourceid="15" destid="17" sourceattachpoint="11" destattachpoint="18" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="16907" y="13365" /&gt;
      &lt;point x="17587" y="13365" /&gt;
      &lt;point x="17587" y="13353" /&gt;
      &lt;point x="18267" y="13353" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="DdsShapes.DdsObjectManagedBridge.1" tooltip="Perform FAS13 testing for the Asia - KORTWN (korea, tawain) instance." left="24756" top="12770" logicalid="39" controlid="19" masterid="9" hint1="0" hint2="0" width="3598" height="1164" noresize="0" nomove="0" nodefaultattachpoints="0" autodrag="1" usedefaultiddshape="1" selectable="1" showselectionhandles="1" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobjectstreaminitwrapper binary="000800000e0e00008c040000" /&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{C868BCF2-A0E0-48DB-906E-D5F2555B6B3E}" vartype="8" /&gt;
        &lt;property name="ShowConnectorSource" value="0" vartype="2" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;shape groupshapeid="0" groupnode="0" /&gt;
  &lt;/ddscontrol&gt;
  &lt;ddscontrol controlprogid="MSDDS.Polyline" left="22869" top="12953" logicalid="40" controlid="20" masterid="0" hint1="0" hint2="0" width="2187" height="800" noresize="0" nomove="0" nodefaultattachpoints="1" autodrag="0" usedefaultiddshape="0" selectable="1" showselectionhandles="0" allownudging="1" isannotation="0" dontautolayout="0" groupcollapsed="0" tabstop="1" visible="1" snaptogrid="0"&gt;
    &lt;control&gt;
      &lt;ddsxmlobj&gt;
        &lt;polyline endtypedst="3" endtypesrc="1" usercolor="32768" linestyle="0" linerender="2" customendtypedstid="0" customendtypesrcid="0" adornsvisible="1" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/control&gt;
    &lt;layoutobject&gt;
      &lt;ddsxmlobj&gt;
        &lt;property name="LogicalObject" value="{FF85E166-0A32-4CE7-B3D0-2FE0D499387A}" vartype="8" /&gt;
        &lt;property name="Virtual" value="0" vartype="11" /&gt;
        &lt;property name="VisibleAP" value="0" vartype="3" /&gt;
      &lt;/ddsxmlobj&gt;
    &lt;/layoutobject&gt;
    &lt;connector lineroutestyle="Microsoft.DataWarehouse.Layout.GraphLayout" sourceid="17" destid="19" sourceattachpoint="19" destattachpoint="14" segmenteditmode="0" bendpointeditmode="0" bendpointvisibility="2" relatedid="0" virtual="0"&gt;
      &lt;point x="23268" y="13353" /&gt;
      &lt;point x="24012" y="13353" /&gt;
      &lt;point x="24012" y="13352" /&gt;
      &lt;point x="24756" y="13352" /&gt;
    &lt;/connector&gt;
  &lt;/ddscontrol&gt;
&lt;/dds&gt;&lt;/dwd:Layout&gt;&lt;dwd:PersistedViewPortTop&gt;-1147&lt;/dwd:PersistedViewPortTop&gt;&lt;/dwd:DtsControlFlowDiagram&gt;&lt;/Package&gt;</DTS:Property><DTS:Property DTS:Name="Namespace">dts-designer-1.0</DTS:Property><DTS:Property DTS:Name="ObjectName">{ED4A7703-A36F-4EAD-84C3-EA163DE6E137}</DTS:Property><DTS:Property DTS:Name="DTSID">{B500DCF0-ABAD-4E69-9F1B-F0B0B5B09B37}</DTS:Property><DTS:Property DTS:Name="Description"></DTS:Property><DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PackageVariable><DTS:Property DTS:Name="ForceExecValue">0</DTS:Property><DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property><DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property><DTS:Property DTS:Name="Disabled">0</DTS:Property><DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property><DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property><DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property><DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property><DTS:Property DTS:Name="LocaleID">1033</DTS:Property><DTS:Property DTS:Name="TransactionOption">1</DTS:Property><DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:Variable><DTS:Property DTS:Name="Expression"></DTS:Property><DTS:Property DTS:Name="EvaluateAsExpression">0</DTS:Property><DTS:Property DTS:Name="Namespace">User</DTS:Property><DTS:Property DTS:Name="ReadOnly">0</DTS:Property><DTS:Property DTS:Name="RaiseChangedEvent">0</DTS:Property><DTS:VariableValue DTS:DataType="8"></DTS:VariableValue><DTS:Property DTS:Name="ObjectName">AODate</DTS:Property><DTS:Property DTS:Name="DTSID">{C4241536-D40A-4494-A5DC-0B94335CFFA5}</DTS:Property><DTS:Property DTS:Name="Description"></DTS:Property><DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:Variable>
<DTS:LoggingOptions><DTS:Property DTS:Name="LoggingMode">0</DTS:Property><DTS:Property DTS:Name="FilterKind">1</DTS:Property><DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions>
<DTS:Executable DTS:ExecutableType="STOCK:SEQUENCE"><DTS:Property DTS:Name="ForceExecValue">0</DTS:Property><DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property><DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property><DTS:Property DTS:Name="Disabled">0</DTS:Property><DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property><DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property><DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property><DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property><DTS:Property DTS:Name="LocaleID">-1</DTS:Property><DTS:Property DTS:Name="TransactionOption">1</DTS:Property><DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:LoggingOptions><DTS:Property DTS:Name="LoggingMode">0</DTS:Property><DTS:Property DTS:Name="FilterKind">1</DTS:Property><DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions>
<DTS:Executable DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=9.0.242.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" DTS:ThreadHint="0"><DTS:Property DTS:Name="ExecutionLocation">0</DTS:Property><DTS:Property DTS:Name="ExecutionAddress"></DTS:Property><DTS:Property DTS:Name="TaskContact">Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1</DTS:Property><DTS:Property DTS:Name="ForceExecValue">0</DTS:Property><DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property><DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property><DTS:Property DTS:Name="Disabled">0</DTS:Property><DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property><DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property><DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property><DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property><DTS:Property DTS:Name="LocaleID">-1</DTS:Property><DTS:Property DTS:Name="TransactionOption">1</DTS:Property><DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:LoggingOptions><DTS:Property DTS:Name="LoggingMode">0</DTS:Property><DTS:Property DTS:Name="FilterKind">1</DTS:Property><DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions><DTS:Property DTS:Name="ObjectName">Get the AODate</DTS:Property><DTS:Property DTS:Name="DTSID">{D8A61257-A8E8-40D5-8AE5-EF5F5CDA40A2}</DTS:Property><DTS:Property DTS:Name="Description">Store the AODate into a variable.</DTS:Property><DTS:Property DTS:Name="CreationName">Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=9.0.242.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91</DTS:Property><DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property><DTS:ObjectData><SQLTask:SqlTaskData SQLTask:Connection="{6AE63389-E2A5-42FF-AF78-7A77F39622C3}" SQLTask:TimeOut="0" SQLTask:IsStoredProc="False" SQLTask:SqlStmtSourceType="DirectInput" SQLTask:SqlStatementSource="select rtrim(cast(convert(char(10),GETDATE() - DATEPART(dd, GETDATE()),10) as varchar(30))) as RtnAODate" SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask"><SQLTask:ResultBinding SQLTask:ResultName="RtnAODate" SQLTask:DtsVariableName="User::AODate"/></SQLTask:SqlTaskData></DTS:ObjectData></DTS:Executable>
<DTS:Executable DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=9.0.242.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" DTS:ThreadHint="0"><DTS:Property DTS:Name="ExecutionLocation">0</DTS:Property><DTS:Property DTS:Name="ExecutionAddress"></DTS:Property><DTS:Property DTS:Name="TaskContact">Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1</DTS:Property><DTS:Property DTS:Name="ForceExecValue">0</DTS:Property><DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property><DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property><DTS:Property DTS:Name="Disabled">0</DTS:Property><DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property><DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property><DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property><DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property><DTS:Property DTS:Name="LocaleID">-1</DTS:Property><DTS:Property DTS:Name="TransactionOption">1</DTS:Property><DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:LoggingOptions><DTS:Property DTS:Name="LoggingMode">0</DTS:Property><DTS:Property DTS:Name="FilterKind">1</DTS:Property><DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions><DTS:Property DTS:Name="ObjectName">Delete FAS13 testing table, if it exists</DTS:Property><DTS:Property DTS:Name="DTSID">{2BB7606B-79D9-4850-BA2C-80E165AED273}</DTS:Property><DTS:Property DTS:Name="Description"></DTS:Property><DTS:Property DTS:Name="CreationName">Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=9.0.242.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91</DTS:Property><DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property><DTS:ObjectData><SQLTask:SqlTaskData SQLTask:Connection="{6AE63389-E2A5-42FF-AF78-7A77F39622C3}" SQLTask:TimeOut="0" SQLTask:IsStoredProc="False" SQLTask:SqlStmtSourceType="DirectInput" SQLTask:SqlStatementSource="if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[_FAS13]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)&#xA;begin&#xA;	drop table [dbo].[_FAS13]&#xA;end&#xA;" SQLTask:ResultType="ResultSetType_None" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask"/></DTS:ObjectData></DTS:Executable>
<DTS:Executable DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=9.0.242.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" DTS:ThreadHint="0"><DTS:Property DTS:Name="ExecutionLocation">0</DTS:Property><DTS:Property DTS:Name="ExecutionAddress"></DTS:Property><DTS:Property DTS:Name="TaskContact">Execute SQL Task; Microsoft Corporation; Microsoft SQL Server v9; © 2004 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1</DTS:Property><DTS:Property DTS:Name="ForceExecValue">0</DTS:Property><DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property><DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property><DTS:Property DTS:Name="Disabled">0</DTS:Property><DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property><DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property><DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property><DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property><DTS:Property DTS:Name="LocaleID">-1</DTS:Property><DTS:Property DTS:Name="TransactionOption">1</DTS:Property><DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:LoggingOptions><DTS:Property DTS:Name="LoggingMode">0</DTS:Property><DTS:Property DTS:Name="FilterKind">1</DTS:Property><DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions><DTS:Property DTS:Name="ObjectName">Create _FAS13 table</DTS:Property><DTS:Property DTS:Name="DTSID">{BC695CF0-DDC7-4F57-9ED3-2C1D83C55850}</DTS:Property><DTS:Property DTS:Name="Description"></DTS:Property><DTS:Property DTS:Name="CreationName">Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=9.0.242.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91</DTS:Property><DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property><DTS:ObjectData><SQLTask:SqlTaskData SQLTask:Connection="{6AE63389-E2A5-42FF-AF78-7A77F39622C3}" SQLTask:TimeOut="0" SQLTask:IsStoredProc="False" SQLTask:SqlStmtSourceType="DirectInput" SQLTask:SqlStatementSource="use atu&#xA;go&#xA;&#xA;create table dbo._FAS13&#xA;(&#xA;    [AODate] datetime NOT NULL,&#xA;    [Server] varchar(20),&#xA;    [LeaseNbr] varchar(30),&#xA;    [Branch] varchar(30),&#xA;    [BookingDate] datetime,&#xA;    [LeaseType] varchar(10),&#xA;    [FAS13LeaseType] varchar(10),&#xA;    [GuarResid] float,&#xA;    [Residual] float,&#xA;    [SalvageValue] float,&#xA;    [ResidValue_used_in_FAS13_calcs] float,&#xA;    [EquipmentCost] float,&#xA;    [IRR] float,&#xA;    [Rate] float,&#xA;    [Nbr_Pay_Per] int,&#xA;    [Pymt] float,&#xA;    [PvFactor] float,&#xA;    [AdvArrears] int,&#xA;    [PresentValue] float,&#xA;    [PVMLPP] float, &#xA;    [Test_1_Purchase_Option_1_Buy_Out] varchar(50),&#xA;    [Test_2_Residual_Percentage_Less_than_5_Pct] varchar(50),&#xA;    [Test_3_Present_Value_of_Minimum_Lease_Payments_Greater_than_90pct] varchar(50),&#xA;    [LeaseShouldBe] varchar(10),&#xA;    [Misclassed] varchar(10)&#xA;)" SQLTask:ResultType="ResultSetType_None" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask"/></DTS:ObjectData></DTS:Executable>
<DTS:PrecedenceConstraint><DTS:Property DTS:Name="Value">0</DTS:Property><DTS:Property DTS:Name="EvalOp">2</DTS:Property><DTS:Property DTS:Name="LogicalAnd">-1</DTS:Property><DTS:Property DTS:Name="Expression"></DTS:Property><DTS:Executable IDREF="{2BB7606B-79D9-4850-BA2C-80E165AED273}" DTS:IsFrom="-1"/><DTS:Executable IDREF="{BC695CF0-DDC7-4F57-9ED3-2C1D83C55850}" DTS:IsFrom="0"/><DTS:Property DTS:Name="ObjectName">Constraint 1</DTS:Property><DTS:Property DTS:Name="DTSID">{5FCF3B31-1564-41BC-9367-455E2A278855}</DTS:Property><DTS:Property DTS:Name="Description"></DTS:Property><DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PrecedenceConstraint>
<DTS:PrecedenceConstraint><DTS:Property DTS:Name="Value">0</DTS:Property><DTS:Property DTS:Name="EvalOp">2</DTS:Property><DTS:Property DTS:Name="LogicalAnd">-1</DTS:Property><DTS:Property DTS:Name="Expression"></DTS:Property><DTS:Executable IDREF="{D8A61257-A8E8-40D5-8AE5-EF5F5CDA40A2}" DTS:IsFrom="-1"/><DTS:Executable IDREF="{2BB7606B-79D9-4850-BA2C-80E165AED273}" DTS:IsFrom="0"/><DTS:Property DTS:Name="ObjectName">Constraint</DTS:Property><DTS:Property DTS:Name="DTSID">{AC339480-911A-4071-B2BD-A9A587C8E897}</DTS:Property><DTS:Property DTS:Name="Description"></DTS:Property><DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PrecedenceConstraint><DTS:Property DTS:Name="ObjectName">Pre-processing Tasks</DTS:Property><DTS:Property DTS:Name="DTSID">{65745A3F-6EC8-4B29-A0B4-2E4ABEBE1CF1}</DTS:Property><DTS:Property DTS:Name="Description">Sequence Container</DTS:Property><DTS:Property DTS:Name="CreationName">STOCK:SEQUENCE</DTS:Property><DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property></DTS:Executable>
<DTS:Executable DTS:ExecutableType="STOCK:SEQUENCE"><DTS:Property DTS:Name="ForceExecValue">0</DTS:Property><DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property><DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property><DTS:Property DTS:Name="Disabled">0</DTS:Property><DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property><DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property><DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property><DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property><DTS:Property DTS:Name="LocaleID">-1</DTS:Property><DTS:Property DTS:Name="TransactionOption">1</DTS:Property><DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:LoggingOptions><DTS:Property DTS:Name="LoggingMode">0</DTS:Property><DTS:Property DTS:Name="FilterKind">1</DTS:Property><DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions>
<DTS:Executable DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=9.0.242.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" DTS:ThreadHint="0"><DTS:Property DTS:Name="ExecutionLocation">0</DTS:Property><DTS:Property DTS:Name="ExecutionAddress"></DTS:Property><DTS:Property DTS:Name="TaskContact"></DTS:Property><DTS:Property DTS:Name="ForceExecValue">0</DTS:Property><DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property><DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property><DTS:Property DTS:Name="Disabled">0</DTS:Property><DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property><DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property><DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property><DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property><DTS:Property DTS:Name="LocaleID">-1</DTS:Property><DTS:Property DTS:Name="TransactionOption">1</DTS:Property><DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:LoggingOptions><DTS:Property DTS:Name="LoggingMode">0</DTS:Property><DTS:Property DTS:Name="FilterKind">1</DTS:Property><DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions><DTS:Property DTS:Name="ObjectName">Hydra</DTS:Property><DTS:Property DTS:Name="DTSID">{00E5B116-4EFE-47FA-BB19-60338DEFDE72}</DTS:Property><DTS:Property DTS:Name="Description">Perform FAS13 testing for the Hydra instance.</DTS:Property><DTS:Property DTS:Name="CreationName">Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=9.0.242.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91</DTS:Property><DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property><DTS:ObjectData><ScriptProject Name="ScriptTask_f1565f78ebd34655b665788ae90f9598" Language="Microsoft Visual Basic .NET" EntryPoint="ScriptMain" SaveBinaries="False" ReadOnlyVariables="User::AODate" ReadWriteVariables=""><ProjectItem Name="dts://Scripts/ScriptTask_f1565f78ebd34655b665788ae90f9598/ScriptMain.vsaitem">
<![CDATA[' Microsoft SQL Server Integration Services Script Task
' Write scripts using Microsoft Visual Basic
' The ScriptMain class is the entry point of the Script Task.

Imports System
Imports System.Data
Imports System.Math
Imports Microsoft.SqlServer.Dts.Runtime
'Added to the default imports
Imports System.Windows.Forms
Imports System.Collections
'for SQL
Imports System.Data.SqlClient
'for PV
Imports Microsoft.VisualBasic

Public Class ScriptMain

	' The execution engine calls this method when the task executes.
	' To access the object model, use the Dts object. Connections, variables, events,
	' and logging features are available as static members of the Dts class.
	' Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
	' 
	' To open Code and Text Editor Help, press F1.
	' To open Object Browser, press Ctrl+Alt+J.

	Public Sub Main()                
        'Get AODate
        Dim aodate As String = CStr(Dts.Variables("AODate").Value)

        ' Run a SQL query to get a population of leases to test - all leases that are not CS (conditional sale) or RA (revolving account) leases.
        Dim mySqlStatement As String
        mySqlStatement = "SELECT LeaseNbr,Branch,LeaseType,GuarResid,Residual,SalvageValue,AnnualCombinedIRR,AnnualFinanceIRR,AnnualPricingYield,EquipmentCost,BillFreq,ContractTerm,PymtsArrears,ContractPymt,BookingDate " & _
                         "FROM atu.dbo._hydra_leasemaster WHERE LeaseType not in ('RA','CS') and NumOfAssets > 0 and EquipmentCost > 0 and aodate = '" & aodate & "'"

        Dim myADONETConnection As SqlClient.SqlConnection = DirectCast(Dts.Connections("crplivatu01.ATU1").AcquireConnection(Dts.Transaction), SqlClient.SqlConnection)
        Dim myCommand As New SqlClient.SqlCommand(mySqlStatement, myADONETConnection)
        myCommand.CommandTimeout = 2000  'Set command timeout in seconds
        Dim reader As SqlDataReader = myCommand.ExecuteReader(CommandBehavior.CloseConnection)

        Dim insertADONETConnection As SqlClient.SqlConnection = DirectCast(Dts.Connections("crplivatu01.ATU1").AcquireConnection(Dts.Transaction), SqlClient.SqlConnection)

        Dim LeaseNbr As String
        Dim Branch As String
        Dim LeaseType As String
        Dim LeaseType_trans As String
        Dim GuarResid As String
        Dim GuarResid_dbl As Double
        Dim Residual As String
        Dim Residual_dbl As Double
        Dim SalvageValue As String
        Dim SalvageValue_dbl As Double
        Dim ResidValue As Double
        Dim AnnualCombinedIRR As String
        Dim AnnualCombinedIRR_dbl As Double
        Dim AnnualFinanceIRR As String
        Dim AnnualFinanceIRR_dbl As Double
        Dim EquipmentCost As String
        Dim EquipmentCost_dbl As Double
        Dim BillFreq As String
        Dim BillFreq_int As Int32
        Dim ContractTerm As String
        Dim ContractTerm_int As Int32
        Dim PymtsArrears As String
        Dim PymtsArrears_int As Int32
        Dim IRR As Double
        Dim AnnualPricingYield As String
        Dim AnnualPricingYield_dbl As Double
        Dim ContractPymt As String
        Dim ContractPymt_dbl As Double
        Dim BookingDate As String
        Dim message As String = "no message"

        Do While reader.Read()
            LeaseNbr = reader("LeaseNbr").ToString
            Branch = reader("Branch").ToString
            LeaseType = reader("LeaseType").ToString
            GuarResid = reader("GuarResid").ToString
            Residual = reader("Residual").ToString
            SalvageValue = reader("SalvageValue").ToString
            AnnualCombinedIRR = reader("AnnualCombinedIRR").ToString
            AnnualFinanceIRR = reader("AnnualFinanceIRR").ToString
            EquipmentCost = reader("EquipmentCost").ToString
            BillFreq = reader("BillFreq").ToString
            ContractTerm = reader("ContractTerm").ToString
            PymtsArrears = reader("PymtsArrears").ToString
            AnnualPricingYield = reader("AnnualPricingYield").ToString
            ContractPymt = reader("ContractPymt").ToString
            BookingDate = reader("BookingDate").ToString

            'Convert values to double, accounting for nulls
            If (GuarResid = "") Then
                GuarResid_dbl = CDbl(0)
            Else
                GuarResid_dbl = CDbl(GuarResid)
            End If

            If (Residual = "") Then
                Residual_dbl = CDbl(0)
            Else
                Residual_dbl = CDbl(Residual)
            End If

            If (SalvageValue = "") Then
                SalvageValue_dbl = CDbl(0)
            Else
                SalvageValue_dbl = CDbl(SalvageValue)
            End If

            If (AnnualCombinedIRR = "") Then
                AnnualCombinedIRR_dbl = CDbl(0)
            Else
                AnnualCombinedIRR_dbl = CDbl(AnnualCombinedIRR)
            End If

            If (AnnualFinanceIRR = "") Then
                AnnualFinanceIRR_dbl = CDbl(0)
            Else
                AnnualFinanceIRR_dbl = CDbl(AnnualFinanceIRR)
            End If

            If (EquipmentCost = "") Then
                EquipmentCost_dbl = CDbl(1) 'use 1 here to prevent div by 0 errors
            Else
                EquipmentCost_dbl = CDbl(EquipmentCost)
            End If

            If (BillFreq = "") Then
                BillFreq_int = CInt(1) 'use 1 here to prevent div by 0 errors
            Else
                BillFreq_int = CInt(BillFreq)
            End If

            If (ContractTerm = "") Then
                ContractTerm_int = CInt(1) 'use 1 here to prevent div by 0 errors
            Else
                ContractTerm_int = CInt(ContractTerm)
            End If

            If (PymtsArrears = "") Then
                PymtsArrears_int = CInt(0) 'use 1 here to prevent div by 0 errors
            Else
                PymtsArrears_int = CInt(PymtsArrears)
            End If

            If (AnnualPricingYield = "") Then
                AnnualPricingYield_dbl = CDbl(0)
            Else
                AnnualPricingYield_dbl = CDbl(AnnualPricingYield)
            End If

            If (ContractPymt = "") Then
                ContractPymt_dbl = CDbl(0)
            Else
                ContractPymt_dbl = CDbl(ContractPymt)
            End If

            '=== Determine the residual value to use ===
            'Rule - if GuarResid is greater than zero then use this field.  If not, then
            'if it's an operating lease (XX) use the salvage value field.  If it's not
            'an operating lease, then use the residual field.
            If (LeaseType = "XX") Then
                'Operating Lease
                ResidValue = SalvageValue_dbl
                LeaseType_trans = "OpLse"
            Else
                If (GuarResid_dbl > 0) Then
                    ResidValue = GuarResid_dbl
                Else
                    'Capital Lease
                    ResidValue = Residual_dbl
                End If

                LeaseType_trans = "CapLse"
            End If


            '=== Determine the internal rate of return (IRR) to use ===
            'Rule - For hydra (Aero and Rail) the IRR is equal to AnnualPricingYield field.  For
            'all other portfolios:
            '   +If the Guaranteed Residual is greater than zero, then IRR equals
            '    the AnnualCombinedIRR field.  
            '   +If the Guaranteed Residual is less than zero and the AnnualFinanceIRR field is greater than
            '    1, the IRR equals the AnnualFinanceIRR field.
            '   +If the Guaranteed Residual is less than zero and the AnnualFinanceIRR field is less than 1, the
            '    IRR equals the AnnualCombinedIRR field.
            IRR = AnnualPricingYield_dbl            

            '================================================================================
            ' Test 1 - Purchase Option $1 Buy Out (Ownership Transfer)
            'Criteria: If the Residual Value (ResidValue) is below the amount of
            '5.00 then test passed and the lease should be classified as a Capital
            'Lease
            '
            'Exceptions: Australia (which doesn't apply anymore) and for hydra 
            '(Aero and Rail) the RV value is at the end of the depreciation life,
            'not the end of the lease term which is what is needed for this test.
            'The end of lease term value is stored in a spreadsheet and used when they
            'analyze RV on a quarterly basis.  Thus, this test cannot be performed
            'for Hydra since the residual value in InfoLease is not the true RV.
            '================================================================================
            Dim Test1_Passed As String = ""
            Test1_Passed = "n/a - true residual data not stored on system"
            
            '================================================================================
            ' Test 2 - Residual Percentage Less than 5% (Bargain Purchase)
            'Criteria: The Residual Percentage (RP) is the guaranteed amount due at the
            'end of the lease (ResidValue) divided by the Total Equipment Cost 
            '(EquipmentCost) of the lease.  If the RP is below 5% then the test passed
            'and the lease should be classified as a Capital Lease.
            '
            'Exceptions: Australia (which doesn't apply anymore) and for hydra 
            '(Aero and Rail) the RV value is at the end of the depreciation life,
            'not the end of the lease term which is what is needed for this test.
            'The end of lease term value is stored in a spreadsheet and used when they
            'analyze RV on a quarterly basis.  Thus, this test cannot be performed
            'for Hydra since the residual value in InfoLease is not the true RV.
            '================================================================================
            Dim Test2_Passed As String = ""            
            Test2_Passed = "n/a - true residual data not stored on system"
            
            '================================================================================
            ' Test 3 - Present Value of Minimum Lease Payments Greater than 90%
            '
            'Criteria: If the present value of minimum lease payments percentage (PVMLPP)
            'is greater than 90%, then the test is passed and the lease should be classified
            'as a Capital Lease.  The present value for this test is performed using the 
            'embedded present value function in VB.Net.
            '
            'Exceptions: None
            'Formula: PVMLPP = (Present Value / EquipmentCost) * 100
            'Where Present Value = PV(Rate, Nbr of Pay Periods, Pymt, Future Value, Type)
            '================================================================================
            Dim Test3_Passed As String = ""
            Dim PresentValue As Double
            Dim Rate As Double = CDbl((IRR / 100) / BillFreq_int)
            Dim Nbr_Pay_Per As Double = CDbl(ContractTerm_int / (12 / BillFreq_int))

            'Determine the contract payment
            'The formula for Pymt is as follows:
            'Pymt = Round(Pmt([Rate], [Nbr_Pay_Per], [pvFactor], [ResidualValue], [AdvArrears]), 2)
            '*** Do an if for hydra payments (ContractPymt field) when you get around to it ***
            Dim Pymt As Double
            Dim pvFactor As Double = EquipmentCost_dbl * -1
            Dim AdvArrears As Int32
            If (PymtsArrears_int = 1) Then
                AdvArrears = 0
            Else
                AdvArrears = 1
            End If

            Pymt = ContractPymt_dbl   'For Hydra, the payment is = to contractpymt         
            'Math.Round(Pmt(Rate, Nbr_Pay_Per, pvFactor, ResidValue, CType(AdvArrears, DueDate)), 2)

            'Calculate the present value
            PresentValue = -PV(Rate, Nbr_Pay_Per, Pymt, GuarResid_dbl, CType(AdvArrears, DueDate))

            'Finally, calculate the PVMLPP
            Dim PVMLPP As Double = Math.Round((PresentValue / EquipmentCost_dbl) * 100, 4)

            If (PVMLPP > 90.1) Then
                Test3_Passed = "Yes"
            Else
                Test3_Passed = "No"
            End If

            'Was lease misclassed?
            Dim ShouldBeLT As String
            Dim MisClassed As String

            If (Test1_Passed = "Yes" Or Test2_Passed = "Yes" Or Test3_Passed = "Yes") Then
                'Lease should be classified as a capital lease
                ShouldBeLT = "CapLse"
            Else
                'All no, should be OpLse
                ShouldBeLT = "OpLse"
            End If

            If (LeaseType_trans = ShouldBeLT) Then
                MisClassed = "No"
            Else
                MisClassed = "Yes"
            End If

            If (MisClassed = "Yes") Then
                'Write results to _FAS13 table in ATU server
                Dim insertStatement As String = "INSERT INTO atu.dbo._FAS13 (AODate,Server,LeaseNbr,Branch,BookingDate,LeaseType,FAS13LeaseType,GuarResid,Residual,SalvageValue," & _
                                                "ResidValue_used_in_FAS13_calcs,EquipmentCost,IRR,Rate,Nbr_Pay_Per,Pymt,PvFactor,AdvArrears,PresentValue," & _
                                                "PVMLPP,Test_1_Purchase_Option_1_Buy_Out,Test_2_Residual_Percentage_Less_than_5_Pct," & _
                                                "Test_3_Present_Value_of_Minimum_Lease_Payments_Greater_than_90pct,LeaseShouldBe,Misclassed) VALUES (" & _
                                                "'" & aodate & "','Hydra','" & LeaseNbr & "','" & Branch & "','" & BookingDate & "','" & LeaseType & "','" & LeaseType_trans & "'," & GuarResid_dbl & "," & Residual_dbl & "," & _
                                                SalvageValue_dbl & "," & ResidValue & "," & EquipmentCost_dbl & "," & IRR & "," & Rate & "," & Nbr_Pay_Per & "," & _
                                                Pymt & "," & pvFactor & "," & AdvArrears & "," & PresentValue & "," & PVMLPP & ",'" & Test1_Passed & "','" & Test2_Passed & "','" & _
                                                Test3_Passed & "','" & ShouldBeLT & "','" & MisClassed & "')"

                'Dim msgButton As DialogResult = MessageBox.Show(insertStatement, "INSERT:", MessageBoxButtons.OK)
                Dim insertCommand As New SqlClient.SqlCommand(insertStatement, insertADONETConnection)
                insertCommand.ExecuteNonQuery()
            End If

        Loop

        '==================================================================================================
        'Note, they might want these results filtered by booking date.  Use the following query to do that:
        '   select a.*, b.bookingdate 
        '   from atu.dbo._fas13 as a, hydra_cf_leasemaster as b
        '   where(a.leasenbr = b.leasenbr)
        '   and bookingdate > '2011-01-01'
        '==================================================================================================
        reader.Close()
        myADONETConnection.Close()
        insertADONETConnection.Close()

        Dts.TaskResult = Dts.Results.Success
    End Sub

End Class]]></ProjectItem><ProjectItem Name="dts://Scripts/ScriptTask_f1565f78ebd34655b665788ae90f9598/ScriptTask_f1565f78ebd34655b665788ae90f9598.vsaproj">
<![CDATA[<VisualStudioProject>
    <VisualBasic
        Version = "8.0.50727.42"
        MVID = "{00000000-0000-0000-0000-000000000000}"
        ProjectType = "Local"
        ProductVersion = "8.0.50727"
        SchemaVersion = "2.0"
    >
        <Build>
            <Settings
                DefaultNamespace = "ScriptTask_f1565f78ebd34655b665788ae90f9598"
                OptionCompare = "0"
                OptionExplicit = "1"
                OptionStrict = "1"
                ProjectName = "ScriptTask_f1565f78ebd34655b665788ae90f9598"
                ReferencePath = "C:\WINDOWS\assembly\GAC_MSIL\Microsoft.SqlServer.ScriptTask\9.0.242.0__89845dcd8080cc91\;C:\WINDOWS\assembly\GAC_MSIL\Microsoft.SqlServer.ManagedDTS\9.0.242.0__89845dcd8080cc91\"
                TreatWarningsAsErrors = "false"
                WarningLevel = "1"
                RootNamespace = "ScriptTask_f1565f78ebd34655b665788ae90f9598"
            >
                <Config
                    Name = "Debug"
                    DefineConstants = ""
                    DefineDebug = "true"
                    DefineTrace = "true"
                    DebugSymbols = "true"
                    RemoveIntegerChecks = "false"
                />
            </Settings>
            <References>
                <Reference
                    Name = "System"
                    AssemblyName = "System"
                />
                <Reference
                    Name = "System.Data"
                    AssemblyName = "System.Data"
                />
                <Reference
                    Name = "Microsoft.SqlServer.ScriptTask"
                    AssemblyName = "Microsoft.SqlServer.ScriptTask"
                />
                <Reference
                    Name = "Microsoft.SqlServer.ManagedDTS"
                    AssemblyName = "Microsoft.SqlServer.ManagedDTS"
                />
            </References>
            <Imports>
                <Import Namespace = "Microsoft.VisualBasic" />
            </Imports>
        </Build>
        <Files>
            <Include>
                <File
                    RelPath = "ScriptMain"
                    BuildAction = "Compile"
                    ItemType = "2"
                />
                <VSAAppGlobal
                    VSAAppGlobalName = "Dts"
                    ItemType = "1"
                    VSAAppGlobalType = "Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptObjectModel"
                />
            </Include>
        </Files>
        <Folders>
            <Include/>
        </Folders>
    </VisualBasic>
</VisualStudioProject>]]></ProjectItem></ScriptProject></DTS:ObjectData></DTS:Executable>
<DTS:Executable DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=9.0.242.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" DTS:ThreadHint="0"><DTS:Property DTS:Name="ExecutionLocation">0</DTS:Property><DTS:Property DTS:Name="ExecutionAddress"></DTS:Property><DTS:Property DTS:Name="TaskContact"></DTS:Property><DTS:Property DTS:Name="ForceExecValue">0</DTS:Property><DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property><DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property><DTS:Property DTS:Name="Disabled">-1</DTS:Property><DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property><DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property><DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property><DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property><DTS:Property DTS:Name="LocaleID">-1</DTS:Property><DTS:Property DTS:Name="TransactionOption">1</DTS:Property><DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:LoggingOptions><DTS:Property DTS:Name="LoggingMode">0</DTS:Property><DTS:Property DTS:Name="FilterKind">1</DTS:Property><DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions><DTS:Property DTS:Name="ObjectName">Rambo</DTS:Property><DTS:Property DTS:Name="DTSID">{D4A0BE0C-8536-4D88-A6E4-81DB48197FED}</DTS:Property><DTS:Property DTS:Name="Description">FAS13 testing for the Rambo (Jacksonville) instance.</DTS:Property><DTS:Property DTS:Name="CreationName">Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=9.0.242.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91</DTS:Property><DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property><DTS:ObjectData><ScriptProject Name="ScriptTask_ad130c40a36f479da5aab6113109f7aa" Language="Microsoft Visual Basic .NET" EntryPoint="ScriptMain" SaveBinaries="False" ReadOnlyVariables="User::AODate" ReadWriteVariables=""><ProjectItem Name="dts://Scripts/ScriptTask_ad130c40a36f479da5aab6113109f7aa/ScriptMain.vsaitem">
<![CDATA[' Microsoft SQL Server Integration Services Script Task
' Write scripts using Microsoft Visual Basic
' The ScriptMain class is the entry point of the Script Task.

Imports System
Imports System.Data
Imports System.Math
Imports Microsoft.SqlServer.Dts.Runtime
'Added to the default imports
Imports System.Windows.Forms
Imports System.Collections
'for SQL
Imports System.Data.SqlClient
'for PV
Imports Microsoft.VisualBasic

Public Class ScriptMain

    ' The execution engine calls this method when the task executes.
    ' To access the object model, use the Dts object. Connections, variables, events,
    ' and logging features are available as static members of the Dts class.
    ' Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
    ' 
    ' To open Code and Text Editor Help, press F1.
    ' To open Object Browser, press Ctrl+Alt+J.

    Public Sub Main()
        'Get AODate
        Dim aodate As String = CStr(Dts.Variables("AODate").Value)

        ' Run a SQL query to get a population of leases to test - all leases that are not CS (conditional sale) or RA (revolving account) leases.
        Dim mySqlStatement As String
        mySqlStatement = "SELECT LeaseNbr,Branch,LeaseType,GuarResid,Residual,SalvageValue,AnnualCombinedIRR,AnnualFinanceIRR,EquipmentCost,BillFreq,ContractTerm,PymtsArrears,ContractPymt,BookingDate " & _
                         "FROM atu.dbo._rambo_leasemaster WHERE LeaseType not in ('RA','CS') and NumOfAssets > 0 and EquipmentCost > 0 and aodate = '" & aodate & "'"

        Dim myADONETConnection As SqlClient.SqlConnection = DirectCast(Dts.Connections("crplivatu01.ATU1").AcquireConnection(Dts.Transaction), SqlClient.SqlConnection)
        Dim myCommand As New SqlClient.SqlCommand(mySqlStatement, myADONETConnection)
        myCommand.CommandTimeout = 2000  'Set command timeout in seconds
        Dim reader As SqlDataReader = myCommand.ExecuteReader(CommandBehavior.CloseConnection)
        Dim insertADONETConnection As SqlClient.SqlConnection = DirectCast(Dts.Connections("crplivatu01.ATU1").AcquireConnection(Dts.Transaction), SqlClient.SqlConnection)

        Dim LeaseNbr As String
        Dim Branch As String
        Dim LeaseType As String
        Dim LeaseType_trans As String
        Dim GuarResid As String
        Dim GuarResid_dbl As Double
        Dim Residual As String
        Dim Residual_dbl As Double
        Dim SalvageValue As String
        Dim SalvageValue_dbl As Double
        Dim ResidValue As Double
        Dim AnnualCombinedIRR As String
        Dim AnnualCombinedIRR_dbl As Double
        Dim AnnualFinanceIRR As String
        Dim AnnualFinanceIRR_dbl As Double
        Dim EquipmentCost As String
        Dim EquipmentCost_dbl As Double
        Dim BillFreq As String
        Dim BillFreq_int As Int32
        Dim ContractTerm As String
        Dim ContractTerm_int As Int32
        Dim PymtsArrears As String
        Dim PymtsArrears_int As Int32
        Dim IRR As Double
        Dim BookingDate As String
        Dim message As String = "no message"

        Do While reader.Read()
            LeaseNbr = reader("LeaseNbr").ToString
            Branch = reader("Branch").ToString
            LeaseType = reader("LeaseType").ToString
            GuarResid = reader("GuarResid").ToString
            Residual = reader("Residual").ToString
            SalvageValue = reader("SalvageValue").ToString
            AnnualCombinedIRR = reader("AnnualCombinedIRR").ToString
            AnnualFinanceIRR = reader("AnnualFinanceIRR").ToString
            EquipmentCost = reader("EquipmentCost").ToString
            BillFreq = reader("BillFreq").ToString
            ContractTerm = reader("ContractTerm").ToString
            PymtsArrears = reader("PymtsArrears").ToString
            BookingDate = reader("BookingDate").ToString

            'Convert values to double, accounting for nulls
            If (GuarResid = "") Then
                GuarResid_dbl = CDbl(0)
            Else
                GuarResid_dbl = CDbl(GuarResid)
            End If

            If (Residual = "") Then
                Residual_dbl = CDbl(0)
            Else
                Residual_dbl = CDbl(Residual)
            End If

            If (SalvageValue = "") Then
                SalvageValue_dbl = CDbl(0)
            Else
                SalvageValue_dbl = CDbl(SalvageValue)
            End If

            If (AnnualCombinedIRR = "") Then
                AnnualCombinedIRR_dbl = CDbl(0)
            Else
                AnnualCombinedIRR_dbl = CDbl(AnnualCombinedIRR)
            End If

            If (AnnualFinanceIRR = "") Then
                AnnualFinanceIRR_dbl = CDbl(0)
            Else
                AnnualFinanceIRR_dbl = CDbl(AnnualFinanceIRR)
            End If

            If (EquipmentCost = "") Then
                EquipmentCost_dbl = CDbl(1) 'use 1 here to prevent div by 0 errors
            Else
                EquipmentCost_dbl = CDbl(EquipmentCost)
            End If

            If (BillFreq = "") Then
                BillFreq_int = CInt(1) 'use 1 here to prevent div by 0 errors
            Else
                BillFreq_int = CInt(BillFreq)
            End If

            If (ContractTerm = "") Then
                ContractTerm_int = CInt(1) 'use 1 here to prevent div by 0 errors
            Else
                ContractTerm_int = CInt(ContractTerm)
            End If

            If (PymtsArrears = "") Then
                PymtsArrears_int = CInt(0) 'use 1 here to prevent div by 0 errors
            Else
                PymtsArrears_int = CInt(PymtsArrears)
            End If

            '=== Determine the residual value to use ===
            'Rule - if GuarResid is greater than zero then use this field.  If not, then
            'if it's an operating lease (XX) use the salvage value field.  If it's not
            'an operating lease, then use the residual field.
            If (LeaseType = "XX") Then
                'Operating Lease
                ResidValue = SalvageValue_dbl
                LeaseType_trans = "OpLse"
            Else
                If (GuarResid_dbl > 0) Then
                    ResidValue = GuarResid_dbl
                Else
                    'Capital Lease
                    ResidValue = Residual_dbl
                End If

                LeaseType_trans = "CapLse"
            End If

            '=== Determine the internal rate of return (IRR) to use ===
            'Rule - For hydra (Aero and Rail) the IRR is equal to AnnualPricingYield field.  For
            'all other portfolios:
            '   +If the Guaranteed Residual is greater than zero, then IRR equals
            '    the AnnualCombinedIRR field.  
            '   +If the Guaranteed Residual is less than zero and the AnnualFinanceIRR field is greater than
            '    1, the IRR equals the AnnualFinanceIRR field.
            '   +If the Guaranteed Residual is less than zero and the AnnualFinanceIRR field is less than 1, the
            '    IRR equals the AnnualCombinedIRR field.
            If (GuarResid_dbl > 0) Then
                IRR = AnnualCombinedIRR_dbl
            Else
                If (AnnualFinanceIRR_dbl > 1) Then
                    IRR = AnnualFinanceIRR_dbl
                Else
                    IRR = AnnualCombinedIRR_dbl
                End If
            End If

            '================================================================================
            ' Test 1 - Purchase Option $1 Buy Out (Ownership Transfer)
            'Criteria: If the Residual Value (ResidValue) is below the amount of
            '5.00 then test passed and the lease should be classified as a Capital
            'Lease
            '
            'Exceptions: Australia (which doesn't apply anymore) and for hydra 
            '(Aero and Rail) the RV value is at the end of the depreciation life,
            'not the end of the lease term which is what is needed for this test.
            'The end of lease term value is stored in a spreadsheet and used when they
            'analyze RV on a quarterly basis.  Thus, this test cannot be performed
            'for Hydra since the residual value in InfoLease is not the true RV.
            '================================================================================
            Dim Test1_Passed As String = ""

            If (ResidValue >= 0 And ResidValue <= 5) Then
                Test1_Passed = "Yes"
            Else
                Test1_Passed = "No"
            End If

            '================================================================================
            ' Test 2 - Residual Percentage Less than 5% (Bargain Purchase)
            'Criteria: The Residual Percentage (RP) is the guaranteed amount due at the
            'end of the lease (ResidValue) divided by the Total Equipment Cost 
            '(EquipmentCost) of the lease.  If the RP is below 5% then the test passed
            'and the lease should be classified as a Capital Lease.
            '
            'Exceptions: Australia (which doesn't apply anymore) and for hydra 
            '(Aero and Rail) the RV value is at the end of the depreciation life,
            'not the end of the lease term which is what is needed for this test.
            'The end of lease term value is stored in a spreadsheet and used when they
            'analyze RV on a quarterly basis.  Thus, this test cannot be performed
            'for Hydra since the residual value in InfoLease is not the true RV.
            '================================================================================
            Dim Test2_Passed As String = ""
            Dim ResidPct As Double
            
            If (LeaseType = "XX") Then
                ResidPct = (SalvageValue_dbl / EquipmentCost_dbl) * 100
            Else
                ResidPct = (GuarResid_dbl / EquipmentCost_dbl) * 100
            End If

            If (ResidPct < 5.01) Then
                Test2_Passed = "Yes"
            Else
                Test2_Passed = "No"
            End If

            '================================================================================
            ' Test 3 - Present Value of Minimum Lease Payments Greater than 90%
            '
            'Criteria: If the present value of minimum lease payments percentage (PVMLPP)
            'is greater than 90%, then the test is passed and the lease should be classified
            'as a Capital Lease.  The present value for this test is performed using the 
            'embedded present value function in VB.Net.
            '
            'Exceptions: None
            'Formula: PVMLPP = (Present Value / EquipmentCost) * 100
            'Where Present Value = PV(Rate, Nbr of Pay Periods, Pymt, Future Value, Type)
            '================================================================================
            Dim Test3_Passed As String = ""
            Dim PresentValue As Double
            Dim Rate As Double = CDbl((IRR / 100) / BillFreq_int)
            Dim Nbr_Pay_Per As Double = CDbl(ContractTerm_int / (12 / BillFreq_int))

            'Determine the contract payment
            'The formula for Pymt is as follows:
            'Pymt = Round(Pmt([Rate], [Nbr_Pay_Per], [pvFactor], [ResidualValue], [AdvArrears]), 2)            
            Dim Pymt As Double
            Dim pvFactor As Double = EquipmentCost_dbl * -1
            Dim AdvArrears As Int32
            If (PymtsArrears_int = 1) Then
                AdvArrears = 0
            Else
                AdvArrears = 1
            End If

            Pymt = Math.Round(Pmt(Rate, Nbr_Pay_Per, pvFactor, ResidValue, CType(AdvArrears, DueDate)), 2)

            'Calculate the present value
            PresentValue = -PV(Rate, Nbr_Pay_Per, Pymt, GuarResid_dbl, CType(AdvArrears, DueDate))

            'Finally, calculate the PVMLPP
            Dim PVMLPP As Double = Math.Round((PresentValue / EquipmentCost_dbl) * 100, 4)

            If (PVMLPP > 90.1) Then
                Test3_Passed = "Yes"
            Else
                Test3_Passed = "No"
            End If

            'Was lease misclassed?
            Dim ShouldBeLT As String
            Dim MisClassed As String

            If (Test1_Passed = "Yes" Or Test2_Passed = "Yes" Or Test3_Passed = "Yes") Then
                'Lease should be classified as a capital lease
                ShouldBeLT = "CapLse"
            Else
                'All no, should be OpLse
                ShouldBeLT = "OpLse"
            End If

            If (LeaseType_trans = ShouldBeLT) Then
                MisClassed = "No"
            Else
                MisClassed = "Yes"
            End If

            If (MisClassed = "Yes") Then
                'Write results to _FAS13 table in ATU server
                Dim insertStatement As String = "INSERT INTO atu.dbo._FAS13 (AODate,Server,LeaseNbr,Branch,BookingDate,LeaseType,FAS13LeaseType,GuarResid,Residual,SalvageValue," & _
                                                 "ResidValue_used_in_FAS13_calcs,EquipmentCost,IRR,Rate,Nbr_Pay_Per,Pymt,PvFactor,AdvArrears,PresentValue," & _
                                                 "PVMLPP,Test_1_Purchase_Option_1_Buy_Out,Test_2_Residual_Percentage_Less_than_5_Pct," & _
                                                 "Test_3_Present_Value_of_Minimum_Lease_Payments_Greater_than_90pct,LeaseShouldBe,Misclassed) VALUES (" & _
                                                 "'" & aodate & "','Rambo','" & LeaseNbr & "','" & Branch & "','" & BookingDate & "','" & LeaseType & "','" & LeaseType_trans & "'," & GuarResid_dbl & "," & Residual_dbl & "," & _
                                                 SalvageValue_dbl & "," & ResidValue & "," & EquipmentCost_dbl & "," & IRR & "," & Rate & "," & Nbr_Pay_Per & "," & _
                                                 Pymt & "," & pvFactor & "," & AdvArrears & "," & PresentValue & "," & PVMLPP & ",'" & Test1_Passed & "','" & Test2_Passed & "','" & _
                                                 Test3_Passed & "','" & ShouldBeLT & "','" & MisClassed & "')"

                Dim insertCommand As New SqlClient.SqlCommand(insertStatement, insertADONETConnection)
                insertCommand.ExecuteNonQuery()
            End If

        Loop

        '==================================================================================================
        'Note, they might want these results filtered by booking date.  Use the following query to do that:
        '   select a.*, b.bookingdate 
        '   from atu.dbo._fas13 as a, hydra_cf_leasemaster as b
        '   where(a.leasenbr = b.leasenbr)
        '   and bookingdate > '2011-01-01'
        ' *** This is no longer required, I've added BookingDate to the table, so filter on that ***
        '==================================================================================================
        reader.Close()
        myADONETConnection.Close()
        insertADONETConnection.Close()

        Dts.TaskResult = Dts.Results.Success
    End Sub

End Class]]></ProjectItem><ProjectItem Name="dts://Scripts/ScriptTask_ad130c40a36f479da5aab6113109f7aa/ScriptTask_ad130c40a36f479da5aab6113109f7aa.vsaproj">
<![CDATA[<VisualStudioProject>
    <VisualBasic
        Version = "8.0.50727.42"
        MVID = "{00000000-0000-0000-0000-000000000000}"
        ProjectType = "Local"
        ProductVersion = "8.0.50727"
        SchemaVersion = "2.0"
    >
        <Build>
            <Settings
                DefaultNamespace = "ScriptTask_ad130c40a36f479da5aab6113109f7aa"
                OptionCompare = "0"
                OptionExplicit = "1"
                OptionStrict = "1"
                ProjectName = "ScriptTask_ad130c40a36f479da5aab6113109f7aa"
                ReferencePath = "C:\WINDOWS\assembly\GAC_MSIL\Microsoft.SqlServer.ScriptTask\9.0.242.0__89845dcd8080cc91\;C:\WINDOWS\assembly\GAC_MSIL\Microsoft.SqlServer.ManagedDTS\9.0.242.0__89845dcd8080cc91\"
                TreatWarningsAsErrors = "false"
                WarningLevel = "1"
                RootNamespace = "ScriptTask_ad130c40a36f479da5aab6113109f7aa"
            >
                <Config
                    Name = "Debug"
                    DefineConstants = ""
                    DefineDebug = "true"
                    DefineTrace = "true"
                    DebugSymbols = "true"
                    RemoveIntegerChecks = "false"
                />
            </Settings>
            <References>
                <Reference
                    Name = "System"
                    AssemblyName = "System"
                />
                <Reference
                    Name = "System.Data"
                    AssemblyName = "System.Data"
                />
                <Reference
                    Name = "Microsoft.SqlServer.ScriptTask"
                    AssemblyName = "Microsoft.SqlServer.ScriptTask"
                />
                <Reference
                    Name = "Microsoft.SqlServer.ManagedDTS"
                    AssemblyName = "Microsoft.SqlServer.ManagedDTS"
                />
            </References>
            <Imports>
                <Import Namespace = "Microsoft.VisualBasic" />
            </Imports>
        </Build>
        <Files>
            <Include>
                <File
                    RelPath = "ScriptMain"
                    BuildAction = "Compile"
                    ItemType = "2"
                />
                <VSAAppGlobal
                    VSAAppGlobalName = "Dts"
                    ItemType = "1"
                    VSAAppGlobalType = "Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptObjectModel"
                />
            </Include>
        </Files>
        <Folders>
            <Include/>
        </Folders>
    </VisualBasic>
</VisualStudioProject>]]></ProjectItem></ScriptProject></DTS:ObjectData></DTS:Executable>
<DTS:Executable DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=9.0.242.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" DTS:ThreadHint="0"><DTS:Property DTS:Name="ExecutionLocation">0</DTS:Property><DTS:Property DTS:Name="ExecutionAddress"></DTS:Property><DTS:Property DTS:Name="TaskContact"></DTS:Property><DTS:Property DTS:Name="ForceExecValue">0</DTS:Property><DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property><DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property><DTS:Property DTS:Name="Disabled">-1</DTS:Property><DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property><DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property><DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property><DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property><DTS:Property DTS:Name="LocaleID">-1</DTS:Property><DTS:Property DTS:Name="TransactionOption">1</DTS:Property><DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:LoggingOptions><DTS:Property DTS:Name="LoggingMode">0</DTS:Property><DTS:Property DTS:Name="FilterKind">1</DTS:Property><DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions><DTS:Property DTS:Name="ObjectName">ILHPUX</DTS:Property><DTS:Property DTS:Name="DTSID">{4862020B-0550-47A4-A319-AC0530A0984D}</DTS:Property><DTS:Property DTS:Name="Description">Perform FAS13 testing for ILHPUX (Canada) instance.</DTS:Property><DTS:Property DTS:Name="CreationName">Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=9.0.242.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91</DTS:Property><DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property><DTS:ObjectData><ScriptProject Name="ScriptTask_9149e345f9ed4c2db92fe4dcc972bbb3" Language="Microsoft Visual Basic .NET" EntryPoint="ScriptMain" SaveBinaries="False" ReadOnlyVariables="User::AODate" ReadWriteVariables=""><ProjectItem Name="dts://Scripts/ScriptTask_9149e345f9ed4c2db92fe4dcc972bbb3/ScriptMain.vsaitem">
<![CDATA[' Microsoft SQL Server Integration Services Script Task
' Write scripts using Microsoft Visual Basic
' The ScriptMain class is the entry point of the Script Task.

Imports System
Imports System.Data
Imports System.Math
Imports Microsoft.SqlServer.Dts.Runtime
'Added to the default imports
Imports System.Windows.Forms
Imports System.Collections
'for SQL
Imports System.Data.SqlClient
'for PV
Imports Microsoft.VisualBasic

Public Class ScriptMain

	' The execution engine calls this method when the task executes.
	' To access the object model, use the Dts object. Connections, variables, events,
	' and logging features are available as static members of the Dts class.
	' Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
	' 
	' To open Code and Text Editor Help, press F1.
	' To open Object Browser, press Ctrl+Alt+J.

	Public Sub Main()
        'Get AODate
        Dim aodate As String = CStr(Dts.Variables("AODate").Value)

        ' Run a SQL query to get a population of leases to test - all leases that are not CS (conditional sale) or RA (revolving account) leases.
        Dim mySqlStatement As String
        mySqlStatement = "SELECT LeaseNbr,Branch,LeaseType,GuarResid,Residual,SalvageValue,AnnualCombinedIRR,AnnualFinanceIRR,EquipmentCost,BillFreq,ContractTerm,PymtsArrears,ContractPymt,BookingDate " & _
                         "FROM atu.dbo._ilhpux_leasemaster WHERE LeaseType not in ('RA','CS') and NumOfAssets > 0 and EquipmentCost > 0 and aodate = '" & aodate & "'"

        Dim myADONETConnection As SqlClient.SqlConnection = DirectCast(Dts.Connections("crplivatu01.ATU1").AcquireConnection(Dts.Transaction), SqlClient.SqlConnection)
        Dim myCommand As New SqlClient.SqlCommand(mySqlStatement, myADONETConnection)
        myCommand.CommandTimeout = 2000  'Set command timeout in seconds
        Dim reader As SqlDataReader = myCommand.ExecuteReader(CommandBehavior.CloseConnection)
        Dim insertADONETConnection As SqlClient.SqlConnection = DirectCast(Dts.Connections("crplivatu01.ATU1").AcquireConnection(Dts.Transaction), SqlClient.SqlConnection)

        Dim LeaseNbr As String
        Dim Branch As String
        Dim LeaseType As String
        Dim LeaseType_trans As String
        Dim GuarResid As String
        Dim GuarResid_dbl As Double
        Dim Residual As String
        Dim Residual_dbl As Double
        Dim SalvageValue As String
        Dim SalvageValue_dbl As Double
        Dim ResidValue As Double
        Dim AnnualCombinedIRR As String
        Dim AnnualCombinedIRR_dbl As Double
        Dim AnnualFinanceIRR As String
        Dim AnnualFinanceIRR_dbl As Double
        Dim EquipmentCost As String
        Dim EquipmentCost_dbl As Double
        Dim BillFreq As String
        Dim BillFreq_int As Int32
        Dim ContractTerm As String
        Dim ContractTerm_int As Int32
        Dim PymtsArrears As String
        Dim PymtsArrears_int As Int32
        Dim IRR As Double
        Dim BookingDate As String
        Dim message As String = "no message"

        Do While reader.Read()
            LeaseNbr = reader("LeaseNbr").ToString
            Branch = reader("Branch").ToString
            LeaseType = reader("LeaseType").ToString
            GuarResid = reader("GuarResid").ToString
            Residual = reader("Residual").ToString
            SalvageValue = reader("SalvageValue").ToString
            AnnualCombinedIRR = reader("AnnualCombinedIRR").ToString
            AnnualFinanceIRR = reader("AnnualFinanceIRR").ToString
            EquipmentCost = reader("EquipmentCost").ToString
            BillFreq = reader("BillFreq").ToString
            ContractTerm = reader("ContractTerm").ToString
            PymtsArrears = reader("PymtsArrears").ToString
            BookingDate = reader("BookingDate").ToString

            'Convert values to double, accounting for nulls
            If (GuarResid = "") Then
                GuarResid_dbl = CDbl(0)
            Else
                GuarResid_dbl = CDbl(GuarResid)
            End If

            If (Residual = "") Then
                Residual_dbl = CDbl(0)
            Else
                Residual_dbl = CDbl(Residual)
            End If

            If (SalvageValue = "") Then
                SalvageValue_dbl = CDbl(0)
            Else
                SalvageValue_dbl = CDbl(SalvageValue)
            End If

            If (AnnualCombinedIRR = "") Then
                AnnualCombinedIRR_dbl = CDbl(0)
            Else
                AnnualCombinedIRR_dbl = CDbl(AnnualCombinedIRR)
            End If

            If (AnnualFinanceIRR = "") Then
                AnnualFinanceIRR_dbl = CDbl(0)
            Else
                AnnualFinanceIRR_dbl = CDbl(AnnualFinanceIRR)
            End If

            If (EquipmentCost = "") Then
                EquipmentCost_dbl = CDbl(1) 'use 1 here to prevent div by 0 errors
            Else
                EquipmentCost_dbl = CDbl(EquipmentCost)
            End If

            If (BillFreq = "") Then
                BillFreq_int = CInt(1) 'use 1 here to prevent div by 0 errors
            Else
                BillFreq_int = CInt(BillFreq)
            End If

            If (ContractTerm = "") Then
                ContractTerm_int = CInt(1) 'use 1 here to prevent div by 0 errors
            Else
                ContractTerm_int = CInt(ContractTerm)
            End If

            If (PymtsArrears = "") Then
                PymtsArrears_int = CInt(0) 'use 1 here to prevent div by 0 errors
            Else
                PymtsArrears_int = CInt(PymtsArrears)
            End If

            '=== Determine the residual value to use ===
            'Rule - if GuarResid is greater than zero then use this field.  If not, then
            'if it's an operating lease (XX) use the salvage value field.  If it's not
            'an operating lease, then use the residual field.
            If (LeaseType = "XX") Then
                'Operating Lease
                ResidValue = SalvageValue_dbl
                LeaseType_trans = "OpLse"
            Else
                If (GuarResid_dbl > 0) Then
                    ResidValue = GuarResid_dbl
                Else
                    'Capital Lease
                    ResidValue = Residual_dbl
                End If

                LeaseType_trans = "CapLse"
            End If

            '=== Determine the internal rate of return (IRR) to use ===
            'Rule - For hydra (Aero and Rail) the IRR is equal to AnnualPricingYield field.  For
            'all other portfolios:
            '   +If the Guaranteed Residual is greater than zero, then IRR equals
            '    the AnnualCombinedIRR field.  
            '   +If the Guaranteed Residual is less than zero and the AnnualFinanceIRR field is greater than
            '    1, the IRR equals the AnnualFinanceIRR field.
            '   +If the Guaranteed Residual is less than zero and the AnnualFinanceIRR field is less than 1, the
            '    IRR equals the AnnualCombinedIRR field.
            If (GuarResid_dbl > 0) Then
                IRR = AnnualCombinedIRR_dbl
            Else
                If (AnnualFinanceIRR_dbl > 1) Then
                    IRR = AnnualFinanceIRR_dbl
                Else
                    IRR = AnnualCombinedIRR_dbl
                End If
            End If

            '================================================================================
            ' Test 1 - Purchase Option $1 Buy Out (Ownership Transfer)
            'Criteria: If the Residual Value (ResidValue) is below the amount of
            '5.00 then test passed and the lease should be classified as a Capital
            'Lease
            '
            'Exceptions: Australia (which doesn't apply anymore) and for hydra 
            '(Aero and Rail) the RV value is at the end of the depreciation life,
            'not the end of the lease term which is what is needed for this test.
            'The end of lease term value is stored in a spreadsheet and used when they
            'analyze RV on a quarterly basis.  Thus, this test cannot be performed
            'for Hydra since the residual value in InfoLease is not the true RV.
            '================================================================================
            Dim Test1_Passed As String = ""

            If (ResidValue >= 0 And ResidValue <= 5) Then
                Test1_Passed = "Yes"
            Else
                Test1_Passed = "No"
            End If

            '================================================================================
            ' Test 2 - Residual Percentage Less than 5% (Bargain Purchase)
            'Criteria: The Residual Percentage (RP) is the guaranteed amount due at the
            'end of the lease (ResidValue) divided by the Total Equipment Cost 
            '(EquipmentCost) of the lease.  If the RP is below 5% then the test passed
            'and the lease should be classified as a Capital Lease.
            '
            'Exceptions: Australia (which doesn't apply anymore) and for hydra 
            '(Aero and Rail) the RV value is at the end of the depreciation life,
            'not the end of the lease term which is what is needed for this test.
            'The end of lease term value is stored in a spreadsheet and used when they
            'analyze RV on a quarterly basis.  Thus, this test cannot be performed
            'for Hydra since the residual value in InfoLease is not the true RV.
            '================================================================================
            Dim Test2_Passed As String = ""
            Dim ResidPct As Double

            If (LeaseType = "XX") Then
                ResidPct = (SalvageValue_dbl / EquipmentCost_dbl) * 100
            Else
                ResidPct = (GuarResid_dbl / EquipmentCost_dbl) * 100
            End If

            If (ResidPct < 5.01) Then
                Test2_Passed = "Yes"
            Else
                Test2_Passed = "No"
            End If

            '================================================================================
            ' Test 3 - Present Value of Minimum Lease Payments Greater than 90%
            '
            'Criteria: If the present value of minimum lease payments percentage (PVMLPP)
            'is greater than 90%, then the test is passed and the lease should be classified
            'as a Capital Lease.  The present value for this test is performed using the 
            'embedded present value function in VB.Net.
            '
            'Exceptions: None
            'Formula: PVMLPP = (Present Value / EquipmentCost) * 100
            'Where Present Value = PV(Rate, Nbr of Pay Periods, Pymt, Future Value, Type)
            '================================================================================
            Dim Test3_Passed As String = ""
            Dim PresentValue As Double
            Dim Rate As Double = CDbl((IRR / 100) / BillFreq_int)
            Dim Nbr_Pay_Per As Double = CDbl(ContractTerm_int / (12 / BillFreq_int))

            'Determine the contract payment
            'The formula for Pymt is as follows:
            'Pymt = Round(Pmt([Rate], [Nbr_Pay_Per], [pvFactor], [ResidualValue], [AdvArrears]), 2)            
            Dim Pymt As Double
            Dim pvFactor As Double = EquipmentCost_dbl * -1
            Dim AdvArrears As Int32
            If (PymtsArrears_int = 1) Then
                AdvArrears = 0
            Else
                AdvArrears = 1
            End If

            Pymt = Math.Round(Pmt(Rate, Nbr_Pay_Per, pvFactor, ResidValue, CType(AdvArrears, DueDate)), 2)

            'Calculate the present value
            PresentValue = -PV(Rate, Nbr_Pay_Per, Pymt, GuarResid_dbl, CType(AdvArrears, DueDate))

            'Finally, calculate the PVMLPP
            Dim PVMLPP As Double = Math.Round((PresentValue / EquipmentCost_dbl) * 100, 4)

            If (PVMLPP > 90.1) Then
                Test3_Passed = "Yes"
            Else
                Test3_Passed = "No"
            End If

            'Was lease misclassed?
            Dim ShouldBeLT As String
            Dim MisClassed As String

            If (Test1_Passed = "Yes" Or Test2_Passed = "Yes" Or Test3_Passed = "Yes") Then
                'Lease should be classified as a capital lease
                ShouldBeLT = "CapLse"
            Else
                'All no, should be OpLse
                ShouldBeLT = "OpLse"
            End If

            If (LeaseType_trans = ShouldBeLT) Then
                MisClassed = "No"
            Else
                MisClassed = "Yes"
            End If

            If (MisClassed = "Yes") Then
                'Write results to _FAS13 table in ATU server
                Dim insertStatement As String = "INSERT INTO atu.dbo._FAS13 (AODate,Server,LeaseNbr,Branch,BookingDate,LeaseType,FAS13LeaseType,GuarResid,Residual,SalvageValue," & _
                                                 "ResidValue_used_in_FAS13_calcs,EquipmentCost,IRR,Rate,Nbr_Pay_Per,Pymt,PvFactor,AdvArrears,PresentValue," & _
                                                 "PVMLPP,Test_1_Purchase_Option_1_Buy_Out,Test_2_Residual_Percentage_Less_than_5_Pct," & _
                                                 "Test_3_Present_Value_of_Minimum_Lease_Payments_Greater_than_90pct,LeaseShouldBe,Misclassed) VALUES (" & _
                                                 "'" & aodate & "','ILHPUX','" & LeaseNbr & "','" & Branch & "','" & BookingDate & "','" & LeaseType & "','" & LeaseType_trans & "'," & GuarResid_dbl & "," & Residual_dbl & "," & _
                                                 SalvageValue_dbl & "," & ResidValue & "," & EquipmentCost_dbl & "," & IRR & "," & Rate & "," & Nbr_Pay_Per & "," & _
                                                 Pymt & "," & pvFactor & "," & AdvArrears & "," & PresentValue & "," & PVMLPP & ",'" & Test1_Passed & "','" & Test2_Passed & "','" & _
                                                 Test3_Passed & "','" & ShouldBeLT & "','" & MisClassed & "')"

                Dim insertCommand As New SqlClient.SqlCommand(insertStatement, insertADONETConnection)
                insertCommand.ExecuteNonQuery()
            End If

        Loop

        '==================================================================================================
        'Note, they might want these results filtered by booking date.  Use the following query to do that:
        '   select a.*, b.bookingdate 
        '   from atu.dbo._fas13 as a, hydra_cf_leasemaster as b
        '   where(a.leasenbr = b.leasenbr)
        '   and bookingdate > '2011-01-01'
        ' *** This is no longer required, I've added BookingDate to the table, so filter on that ***
        '==================================================================================================
        reader.Close()
        myADONETConnection.Close()
        insertADONETConnection.Close()

        Dts.TaskResult = Dts.Results.Success
	End Sub

End Class]]></ProjectItem><ProjectItem Name="dts://Scripts/ScriptTask_9149e345f9ed4c2db92fe4dcc972bbb3/ScriptTask_9149e345f9ed4c2db92fe4dcc972bbb3.vsaproj">
<![CDATA[<VisualStudioProject>
    <VisualBasic
        Version = "8.0.50727.42"
        MVID = "{00000000-0000-0000-0000-000000000000}"
        ProjectType = "Local"
        ProductVersion = "8.0.50727"
        SchemaVersion = "2.0"
    >
        <Build>
            <Settings
                DefaultNamespace = "ScriptTask_9149e345f9ed4c2db92fe4dcc972bbb3"
                OptionCompare = "0"
                OptionExplicit = "1"
                OptionStrict = "1"
                ProjectName = "ScriptTask_9149e345f9ed4c2db92fe4dcc972bbb3"
                ReferencePath = "C:\WINDOWS\assembly\GAC_MSIL\Microsoft.SqlServer.ScriptTask\9.0.242.0__89845dcd8080cc91\;C:\WINDOWS\assembly\GAC_MSIL\Microsoft.SqlServer.ManagedDTS\9.0.242.0__89845dcd8080cc91\"
                TreatWarningsAsErrors = "false"
                WarningLevel = "1"
                RootNamespace = "ScriptTask_9149e345f9ed4c2db92fe4dcc972bbb3"
            >
                <Config
                    Name = "Debug"
                    DefineConstants = ""
                    DefineDebug = "true"
                    DefineTrace = "true"
                    DebugSymbols = "true"
                    RemoveIntegerChecks = "false"
                />
            </Settings>
            <References>
                <Reference
                    Name = "System"
                    AssemblyName = "System"
                />
                <Reference
                    Name = "System.Data"
                    AssemblyName = "System.Data"
                />
                <Reference
                    Name = "Microsoft.SqlServer.ScriptTask"
                    AssemblyName = "Microsoft.SqlServer.ScriptTask"
                />
                <Reference
                    Name = "Microsoft.SqlServer.ManagedDTS"
                    AssemblyName = "Microsoft.SqlServer.ManagedDTS"
                />
            </References>
            <Imports>
                <Import Namespace = "Microsoft.VisualBasic" />
            </Imports>
        </Build>
        <Files>
            <Include>
                <File
                    RelPath = "ScriptMain"
                    BuildAction = "Compile"
                    ItemType = "2"
                />
                <VSAAppGlobal
                    VSAAppGlobalName = "Dts"
                    ItemType = "1"
                    VSAAppGlobalType = "Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptObjectModel"
                />
            </Include>
        </Files>
        <Folders>
            <Include/>
        </Folders>
    </VisualBasic>
</VisualStudioProject>]]></ProjectItem></ScriptProject></DTS:ObjectData></DTS:Executable>
<DTS:Executable DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=9.0.242.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" DTS:ThreadHint="0"><DTS:Property DTS:Name="ExecutionLocation">0</DTS:Property><DTS:Property DTS:Name="ExecutionAddress"></DTS:Property><DTS:Property DTS:Name="TaskContact"></DTS:Property><DTS:Property DTS:Name="ForceExecValue">0</DTS:Property><DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property><DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property><DTS:Property DTS:Name="Disabled">1</DTS:Property><DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property><DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property><DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property><DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property><DTS:Property DTS:Name="LocaleID">-1</DTS:Property><DTS:Property DTS:Name="TransactionOption">1</DTS:Property><DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:LoggingOptions><DTS:Property DTS:Name="LoggingMode">0</DTS:Property><DTS:Property DTS:Name="FilterKind">1</DTS:Property><DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions><DTS:Property DTS:Name="ObjectName">Medusa</DTS:Property><DTS:Property DTS:Name="DTSID">{822DC3FA-999A-4EB5-972A-224058B4494B}</DTS:Property><DTS:Property DTS:Name="Description">Perform FAS13 testing for the Medusa (Europe) instance.</DTS:Property><DTS:Property DTS:Name="CreationName">Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=9.0.242.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91</DTS:Property><DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property><DTS:ObjectData><ScriptProject Name="ScriptTask_240359e02efc4c68adc700b403ededc3" Language="Microsoft Visual Basic .NET" EntryPoint="ScriptMain" SaveBinaries="False" ReadOnlyVariables="User::AODate" ReadWriteVariables=""><ProjectItem Name="dts://Scripts/ScriptTask_240359e02efc4c68adc700b403ededc3/ScriptMain.vsaitem">
<![CDATA[' Microsoft SQL Server Integration Services Script Task
' Write scripts using Microsoft Visual Basic
' The ScriptMain class is the entry point of the Script Task.

Imports System
Imports System.Data
Imports System.Math
Imports Microsoft.SqlServer.Dts.Runtime
'Added to the default imports
Imports System.Windows.Forms
Imports System.Collections
'for SQL
Imports System.Data.SqlClient
'for PV
Imports Microsoft.VisualBasic

Public Class ScriptMain

	' The execution engine calls this method when the task executes.
	' To access the object model, use the Dts object. Connections, variables, events,
	' and logging features are available as static members of the Dts class.
	' Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
	' 
	' To open Code and Text Editor Help, press F1.
	' To open Object Browser, press Ctrl+Alt+J.

	Public Sub Main()
        'Get AODate
        Dim aodate As String = CStr(Dts.Variables("AODate").Value)

        ' Run a SQL query to get a population of leases to test - all leases that are not CS (conditional sale) or RA (revolving account) leases.
        Dim mySqlStatement As String
        mySqlStatement = "SELECT LeaseNbr,Branch,LeaseType,GuarResid,Residual,SalvageValue,AnnualCombinedIRR,AnnualFinanceIRR,EquipmentCost,BillFreq,ContractTerm,PymtsArrears,ContractPymt,BookingDate " & _
                         "FROM atu.dbo._medusa_leasemaster WHERE LeaseType not in ('RA','CS') and NumOfAssets > 0 and EquipmentCost > 0 and aodate = '" & aodate & "'"

        Dim myADONETConnection As SqlClient.SqlConnection = DirectCast(Dts.Connections("crplivatu01.ATU1").AcquireConnection(Dts.Transaction), SqlClient.SqlConnection)
        Dim myCommand As New SqlClient.SqlCommand(mySqlStatement, myADONETConnection)
        myCommand.CommandTimeout = 2000  'Set command timeout in seconds
        Dim reader As SqlDataReader = myCommand.ExecuteReader(CommandBehavior.CloseConnection)
        Dim insertADONETConnection As SqlClient.SqlConnection = DirectCast(Dts.Connections("crplivatu01.ATU1").AcquireConnection(Dts.Transaction), SqlClient.SqlConnection)

        Dim LeaseNbr As String
        Dim Branch As String
        Dim LeaseType As String
        Dim LeaseType_trans As String
        Dim GuarResid As String
        Dim GuarResid_dbl As Double
        Dim Residual As String
        Dim Residual_dbl As Double
        Dim SalvageValue As String
        Dim SalvageValue_dbl As Double
        Dim ResidValue As Double
        Dim AnnualCombinedIRR As String
        Dim AnnualCombinedIRR_dbl As Double
        Dim AnnualFinanceIRR As String
        Dim AnnualFinanceIRR_dbl As Double
        Dim EquipmentCost As String
        Dim EquipmentCost_dbl As Double
        Dim BillFreq As String
        Dim BillFreq_int As Int32
        Dim ContractTerm As String
        Dim ContractTerm_int As Int32
        Dim PymtsArrears As String
        Dim PymtsArrears_int As Int32
        Dim IRR As Double
        Dim BookingDate As String
        Dim message As String = "no message"

        Do While reader.Read()
            LeaseNbr = reader("LeaseNbr").ToString
            Branch = reader("Branch").ToString
            LeaseType = reader("LeaseType").ToString
            GuarResid = reader("GuarResid").ToString
            Residual = reader("Residual").ToString
            SalvageValue = reader("SalvageValue").ToString
            AnnualCombinedIRR = reader("AnnualCombinedIRR").ToString
            AnnualFinanceIRR = reader("AnnualFinanceIRR").ToString
            EquipmentCost = reader("EquipmentCost").ToString
            BillFreq = reader("BillFreq").ToString
            ContractTerm = reader("ContractTerm").ToString
            PymtsArrears = reader("PymtsArrears").ToString
            BookingDate = reader("BookingDate").ToString

            'Convert values to double, accounting for nulls
            If (GuarResid = "") Then
                GuarResid_dbl = CDbl(0)
            Else
                GuarResid_dbl = CDbl(GuarResid)
            End If

            If (Residual = "") Then
                Residual_dbl = CDbl(0)
            Else
                Residual_dbl = CDbl(Residual)
            End If

            If (SalvageValue = "") Then
                SalvageValue_dbl = CDbl(0)
            Else
                SalvageValue_dbl = CDbl(SalvageValue)
            End If

            If (AnnualCombinedIRR = "") Then
                AnnualCombinedIRR_dbl = CDbl(0)
            Else
                AnnualCombinedIRR_dbl = CDbl(AnnualCombinedIRR)
            End If

            If (AnnualFinanceIRR = "") Then
                AnnualFinanceIRR_dbl = CDbl(0)
            Else
                AnnualFinanceIRR_dbl = CDbl(AnnualFinanceIRR)
            End If

            If (EquipmentCost = "") Then
                EquipmentCost_dbl = CDbl(1) 'use 1 here to prevent div by 0 errors
            Else
                EquipmentCost_dbl = CDbl(EquipmentCost)
            End If

            If (BillFreq = "") Then
                BillFreq_int = CInt(1) 'use 1 here to prevent div by 0 errors
            Else
                BillFreq_int = CInt(BillFreq)
            End If

            If (ContractTerm = "") Then
                ContractTerm_int = CInt(1) 'use 1 here to prevent div by 0 errors
            Else
                ContractTerm_int = CInt(ContractTerm)
            End If

            If (PymtsArrears = "") Then
                PymtsArrears_int = CInt(0) 'use 1 here to prevent div by 0 errors
            Else
                PymtsArrears_int = CInt(PymtsArrears)
            End If

            '=== Determine the residual value to use ===
            'Rule - if GuarResid is greater than zero then use this field.  If not, then
            'if it's an operating lease (XX) use the salvage value field.  If it's not
            'an operating lease, then use the residual field.
            If (LeaseType = "XX") Then
                'Operating Lease
                ResidValue = SalvageValue_dbl
                LeaseType_trans = "OpLse"
            Else
                If (GuarResid_dbl > 0) Then
                    ResidValue = GuarResid_dbl
                Else
                    'Capital Lease
                    ResidValue = Residual_dbl
                End If

                LeaseType_trans = "CapLse"
            End If

            '=== Determine the internal rate of return (IRR) to use ===
            'Rule - For hydra (Aero and Rail) the IRR is equal to AnnualPricingYield field.  For
            'all other portfolios:
            '   +If the Guaranteed Residual is greater than zero, then IRR equals
            '    the AnnualCombinedIRR field.  
            '   +If the Guaranteed Residual is less than zero and the AnnualFinanceIRR field is greater than
            '    1, the IRR equals the AnnualFinanceIRR field.
            '   +If the Guaranteed Residual is less than zero and the AnnualFinanceIRR field is less than 1, the
            '    IRR equals the AnnualCombinedIRR field.
            If (GuarResid_dbl > 0) Then
                IRR = AnnualCombinedIRR_dbl
            Else
                If (AnnualFinanceIRR_dbl > 1) Then
                    IRR = AnnualFinanceIRR_dbl
                Else
                    IRR = AnnualCombinedIRR_dbl
                End If
            End If

            '================================================================================
            ' Test 1 - Purchase Option $1 Buy Out (Ownership Transfer)
            'Criteria: If the Residual Value (ResidValue) is below the amount of
            '5.00 then test passed and the lease should be classified as a Capital
            'Lease
            '
            'Exceptions: Australia (which doesn't apply anymore) and for hydra 
            '(Aero and Rail) the RV value is at the end of the depreciation life,
            'not the end of the lease term which is what is needed for this test.
            'The end of lease term value is stored in a spreadsheet and used when they
            'analyze RV on a quarterly basis.  Thus, this test cannot be performed
            'for Hydra since the residual value in InfoLease is not the true RV.
            '================================================================================
            Dim Test1_Passed As String = ""

            If (ResidValue >= 0 And ResidValue <= 5) Then
                Test1_Passed = "Yes"
            Else
                Test1_Passed = "No"
            End If

            '================================================================================
            ' Test 2 - Residual Percentage Less than 5% (Bargain Purchase)
            'Criteria: The Residual Percentage (RP) is the guaranteed amount due at the
            'end of the lease (ResidValue) divided by the Total Equipment Cost 
            '(EquipmentCost) of the lease.  If the RP is below 5% then the test passed
            'and the lease should be classified as a Capital Lease.
            '
            'Exceptions: Australia (which doesn't apply anymore) and for hydra 
            '(Aero and Rail) the RV value is at the end of the depreciation life,
            'not the end of the lease term which is what is needed for this test.
            'The end of lease term value is stored in a spreadsheet and used when they
            'analyze RV on a quarterly basis.  Thus, this test cannot be performed
            'for Hydra since the residual value in InfoLease is not the true RV.
            '================================================================================
            Dim Test2_Passed As String = ""
            Dim ResidPct As Double

            If (LeaseType = "XX") Then
                ResidPct = (SalvageValue_dbl / EquipmentCost_dbl) * 100
            Else
                ResidPct = (GuarResid_dbl / EquipmentCost_dbl) * 100
            End If

            If (ResidPct < 5.01) Then
                Test2_Passed = "Yes"
            Else
                Test2_Passed = "No"
            End If

            '================================================================================
            ' Test 3 - Present Value of Minimum Lease Payments Greater than 90%
            '
            'Criteria: If the present value of minimum lease payments percentage (PVMLPP)
            'is greater than 90%, then the test is passed and the lease should be classified
            'as a Capital Lease.  The present value for this test is performed using the 
            'embedded present value function in VB.Net.
            '
            'Exceptions: None
            'Formula: PVMLPP = (Present Value / EquipmentCost) * 100
            'Where Present Value = PV(Rate, Nbr of Pay Periods, Pymt, Future Value, Type)
            '================================================================================
            Dim Test3_Passed As String = ""
            Dim PresentValue As Double
            Dim Rate As Double = CDbl((IRR / 100) / BillFreq_int)
            Dim Nbr_Pay_Per As Double = CDbl(ContractTerm_int / (12 / BillFreq_int))

            'Determine the contract payment
            'The formula for Pymt is as follows:
            'Pymt = Round(Pmt([Rate], [Nbr_Pay_Per], [pvFactor], [ResidualValue], [AdvArrears]), 2)            
            Dim Pymt As Double
            Dim pvFactor As Double = EquipmentCost_dbl * -1
            Dim AdvArrears As Int32
            If (PymtsArrears_int = 1) Then
                AdvArrears = 0
            Else
                AdvArrears = 1
            End If

            Pymt = Math.Round(Pmt(Rate, Nbr_Pay_Per, pvFactor, ResidValue, CType(AdvArrears, DueDate)), 2)

            'Calculate the present value
            PresentValue = -PV(Rate, Nbr_Pay_Per, Pymt, GuarResid_dbl, CType(AdvArrears, DueDate))

            'Finally, calculate the PVMLPP
            Dim PVMLPP As Double = Math.Round((PresentValue / EquipmentCost_dbl) * 100, 4)

            If (PVMLPP > 90.1) Then
                Test3_Passed = "Yes"
            Else
                Test3_Passed = "No"
            End If

            'Was lease misclassed?
            Dim ShouldBeLT As String
            Dim MisClassed As String

            If (Test1_Passed = "Yes" Or Test2_Passed = "Yes" Or Test3_Passed = "Yes") Then
                'Lease should be classified as a capital lease
                ShouldBeLT = "CapLse"
            Else
                'All no, should be OpLse
                ShouldBeLT = "OpLse"
            End If

            If (LeaseType_trans = ShouldBeLT) Then
                MisClassed = "No"
            Else
                MisClassed = "Yes"
            End If

            If (MisClassed = "Yes") Then
                'Write results to _FAS13 table in ATU server
                Dim insertStatement As String = "INSERT INTO atu.dbo._FAS13 (AODate,Server,LeaseNbr,Branch,BookingDate,LeaseType,FAS13LeaseType,GuarResid,Residual,SalvageValue," & _
                                                 "ResidValue_used_in_FAS13_calcs,EquipmentCost,IRR,Rate,Nbr_Pay_Per,Pymt,PvFactor,AdvArrears,PresentValue," & _
                                                 "PVMLPP,Test_1_Purchase_Option_1_Buy_Out,Test_2_Residual_Percentage_Less_than_5_Pct," & _
                                                 "Test_3_Present_Value_of_Minimum_Lease_Payments_Greater_than_90pct,LeaseShouldBe,Misclassed) VALUES (" & _
                                                 "'" & aodate & "','Medusa','" & LeaseNbr & "','" & Branch & "','" & BookingDate & "','" & LeaseType & "','" & LeaseType_trans & "'," & GuarResid_dbl & "," & Residual_dbl & "," & _
                                                 SalvageValue_dbl & "," & ResidValue & "," & EquipmentCost_dbl & "," & IRR & "," & Rate & "," & Nbr_Pay_Per & "," & _
                                                 Pymt & "," & pvFactor & "," & AdvArrears & "," & PresentValue & "," & PVMLPP & ",'" & Test1_Passed & "','" & Test2_Passed & "','" & _
                                                 Test3_Passed & "','" & ShouldBeLT & "','" & MisClassed & "')"

                Dim insertCommand As New SqlClient.SqlCommand(insertStatement, insertADONETConnection)
                insertCommand.ExecuteNonQuery()
            End If

        Loop

        '==================================================================================================
        'Note, they might want these results filtered by booking date.  Use the following query to do that:
        '   select a.*, b.bookingdate 
        '   from atu.dbo._fas13 as a, hydra_cf_leasemaster as b
        '   where(a.leasenbr = b.leasenbr)
        '   and bookingdate > '2011-01-01'
        ' *** This is no longer required, I've added BookingDate to the table, so filter on that ***
        '==================================================================================================
        reader.Close()
        myADONETConnection.Close()
        insertADONETConnection.Close()

        Dts.TaskResult = Dts.Results.Success
	End Sub

End Class]]></ProjectItem><ProjectItem Name="dts://Scripts/ScriptTask_240359e02efc4c68adc700b403ededc3/ScriptTask_240359e02efc4c68adc700b403ededc3.vsaproj">
<![CDATA[<VisualStudioProject>
    <VisualBasic
        Version = "8.0.50727.42"
        MVID = "{00000000-0000-0000-0000-000000000000}"
        ProjectType = "Local"
        ProductVersion = "8.0.50727"
        SchemaVersion = "2.0"
    >
        <Build>
            <Settings
                DefaultNamespace = "ScriptTask_240359e02efc4c68adc700b403ededc3"
                OptionCompare = "0"
                OptionExplicit = "1"
                OptionStrict = "1"
                ProjectName = "ScriptTask_240359e02efc4c68adc700b403ededc3"
                ReferencePath = "C:\WINDOWS\assembly\GAC_MSIL\Microsoft.SqlServer.ScriptTask\9.0.242.0__89845dcd8080cc91\;C:\WINDOWS\assembly\GAC_MSIL\Microsoft.SqlServer.ManagedDTS\9.0.242.0__89845dcd8080cc91\"
                TreatWarningsAsErrors = "false"
                WarningLevel = "1"
                RootNamespace = "ScriptTask_240359e02efc4c68adc700b403ededc3"
            >
                <Config
                    Name = "Debug"
                    DefineConstants = ""
                    DefineDebug = "true"
                    DefineTrace = "true"
                    DebugSymbols = "true"
                    RemoveIntegerChecks = "false"
                />
            </Settings>
            <References>
                <Reference
                    Name = "System"
                    AssemblyName = "System"
                />
                <Reference
                    Name = "System.Data"
                    AssemblyName = "System.Data"
                />
                <Reference
                    Name = "Microsoft.SqlServer.ScriptTask"
                    AssemblyName = "Microsoft.SqlServer.ScriptTask"
                />
                <Reference
                    Name = "Microsoft.SqlServer.ManagedDTS"
                    AssemblyName = "Microsoft.SqlServer.ManagedDTS"
                />
            </References>
            <Imports>
                <Import Namespace = "Microsoft.VisualBasic" />
            </Imports>
        </Build>
        <Files>
            <Include>
                <File
                    RelPath = "ScriptMain"
                    BuildAction = "Compile"
                    ItemType = "2"
                />
                <VSAAppGlobal
                    VSAAppGlobalName = "Dts"
                    ItemType = "1"
                    VSAAppGlobalType = "Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptObjectModel"
                />
            </Include>
        </Files>
        <Folders>
            <Include/>
        </Folders>
    </VisualBasic>
</VisualStudioProject>]]></ProjectItem></ScriptProject></DTS:ObjectData></DTS:Executable>
<DTS:Executable DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=9.0.242.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" DTS:ThreadHint="0"><DTS:Property DTS:Name="ExecutionLocation">0</DTS:Property><DTS:Property DTS:Name="ExecutionAddress"></DTS:Property><DTS:Property DTS:Name="TaskContact"></DTS:Property><DTS:Property DTS:Name="ForceExecValue">0</DTS:Property><DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property><DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property><DTS:Property DTS:Name="Disabled">-1</DTS:Property><DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property><DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property><DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property><DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property><DTS:Property DTS:Name="LocaleID">-1</DTS:Property><DTS:Property DTS:Name="TransactionOption">1</DTS:Property><DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:LoggingOptions><DTS:Property DTS:Name="LoggingMode">0</DTS:Property><DTS:Property DTS:Name="FilterKind">1</DTS:Property><DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions><DTS:Property DTS:Name="ObjectName">Asia - HKGSINMALPRC</DTS:Property><DTS:Property DTS:Name="DTSID">{E18E0CB6-A293-4314-B206-F9F44B960594}</DTS:Property><DTS:Property DTS:Name="Description">Perform FAS13 testing for the Asia - HKGSINMALPRC (Asia - hong kong, singapore, malaysia, and china) instance.</DTS:Property><DTS:Property DTS:Name="CreationName">Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=9.0.242.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91</DTS:Property><DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property><DTS:ObjectData><ScriptProject Name="ScriptTask_b5d995ab80d1404daeb23a2a4dff32bf" Language="Microsoft Visual Basic .NET" EntryPoint="ScriptMain" SaveBinaries="False" ReadOnlyVariables="User::AODate" ReadWriteVariables=""><ProjectItem Name="dts://Scripts/ScriptTask_b5d995ab80d1404daeb23a2a4dff32bf/ScriptMain.vsaitem">
<![CDATA[' Microsoft SQL Server Integration Services Script Task
' Write scripts using Microsoft Visual Basic
' The ScriptMain class is the entry point of the Script Task.

Imports System
Imports System.Data
Imports System.Math
Imports Microsoft.SqlServer.Dts.Runtime
'Added to the default imports
Imports System.Windows.Forms
Imports System.Collections
'for SQL
Imports System.Data.SqlClient
'for PV
Imports Microsoft.VisualBasic

Public Class ScriptMain

	' The execution engine calls this method when the task executes.
	' To access the object model, use the Dts object. Connections, variables, events,
	' and logging features are available as static members of the Dts class.
	' Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
	' 
	' To open Code and Text Editor Help, press F1.
	' To open Object Browser, press Ctrl+Alt+J.

	Public Sub Main()
        'Get AODate
        Dim aodate As String = CStr(Dts.Variables("AODate").Value)

        ' Run a SQL query to get a population of leases to test - all leases that are not CS (conditional sale) or RA (revolving account) leases.
        Dim mySqlStatement As String
        mySqlStatement = "SELECT LeaseNbr,Branch,LeaseType,GuarResid,Residual,SalvageValue,AnnualCombinedIRR,AnnualFinanceIRR,EquipmentCost,BillFreq,ContractTerm,PymtsArrears,ContractPymt,BookingDate " & _
                         "FROM atu.dbo._asia_hkgsinmalprc_leasemaster WHERE LeaseType not in ('RA','CS') and NumOfAssets > 0 and EquipmentCost > 0 and aodate = '" & aodate & "'"

        Dim myADONETConnection As SqlClient.SqlConnection = DirectCast(Dts.Connections("crplivatu01.ATU1").AcquireConnection(Dts.Transaction), SqlClient.SqlConnection)
        Dim myCommand As New SqlClient.SqlCommand(mySqlStatement, myADONETConnection)
        myCommand.CommandTimeout = 2000  'Set command timeout in seconds
        Dim reader As SqlDataReader = myCommand.ExecuteReader(CommandBehavior.CloseConnection)
        Dim insertADONETConnection As SqlClient.SqlConnection = DirectCast(Dts.Connections("crplivatu01.ATU1").AcquireConnection(Dts.Transaction), SqlClient.SqlConnection)

        Dim LeaseNbr As String
        Dim Branch As String
        Dim LeaseType As String
        Dim LeaseType_trans As String
        Dim GuarResid As String
        Dim GuarResid_dbl As Double
        Dim Residual As String
        Dim Residual_dbl As Double
        Dim SalvageValue As String
        Dim SalvageValue_dbl As Double
        Dim ResidValue As Double
        Dim AnnualCombinedIRR As String
        Dim AnnualCombinedIRR_dbl As Double
        Dim AnnualFinanceIRR As String
        Dim AnnualFinanceIRR_dbl As Double
        Dim EquipmentCost As String
        Dim EquipmentCost_dbl As Double
        Dim BillFreq As String
        Dim BillFreq_int As Int32
        Dim ContractTerm As String
        Dim ContractTerm_int As Int32
        Dim PymtsArrears As String
        Dim PymtsArrears_int As Int32
        Dim IRR As Double
        Dim BookingDate As String
        Dim message As String = "no message"

        Do While reader.Read()
            LeaseNbr = reader("LeaseNbr").ToString
            Branch = reader("Branch").ToString
            LeaseType = reader("LeaseType").ToString
            GuarResid = reader("GuarResid").ToString
            Residual = reader("Residual").ToString
            SalvageValue = reader("SalvageValue").ToString
            AnnualCombinedIRR = reader("AnnualCombinedIRR").ToString
            AnnualFinanceIRR = reader("AnnualFinanceIRR").ToString
            EquipmentCost = reader("EquipmentCost").ToString
            BillFreq = reader("BillFreq").ToString
            ContractTerm = reader("ContractTerm").ToString
            PymtsArrears = reader("PymtsArrears").ToString
            BookingDate = reader("BookingDate").ToString

            'Convert values to double, accounting for nulls
            If (GuarResid = "") Then
                GuarResid_dbl = CDbl(0)
            Else
                GuarResid_dbl = CDbl(GuarResid)
            End If

            If (Residual = "") Then
                Residual_dbl = CDbl(0)
            Else
                Residual_dbl = CDbl(Residual)
            End If

            If (SalvageValue = "") Then
                SalvageValue_dbl = CDbl(0)
            Else
                SalvageValue_dbl = CDbl(SalvageValue)
            End If

            If (AnnualCombinedIRR = "") Then
                AnnualCombinedIRR_dbl = CDbl(0)
            Else
                AnnualCombinedIRR_dbl = CDbl(AnnualCombinedIRR)
            End If

            If (AnnualFinanceIRR = "") Then
                AnnualFinanceIRR_dbl = CDbl(0)
            Else
                AnnualFinanceIRR_dbl = CDbl(AnnualFinanceIRR)
            End If

            If (EquipmentCost = "") Then
                EquipmentCost_dbl = CDbl(1) 'use 1 here to prevent div by 0 errors
            Else
                EquipmentCost_dbl = CDbl(EquipmentCost)
            End If

            If (BillFreq = "") Then
                BillFreq_int = CInt(1) 'use 1 here to prevent div by 0 errors
            Else
                BillFreq_int = CInt(BillFreq)
            End If

            If (ContractTerm = "") Then
                ContractTerm_int = CInt(1) 'use 1 here to prevent div by 0 errors
            Else
                ContractTerm_int = CInt(ContractTerm)
            End If

            If (PymtsArrears = "") Then
                PymtsArrears_int = CInt(0) 'use 1 here to prevent div by 0 errors
            Else
                PymtsArrears_int = CInt(PymtsArrears)
            End If

            '=== Determine the residual value to use ===
            'Rule - if GuarResid is greater than zero then use this field.  If not, then
            'if it's an operating lease (XX) use the salvage value field.  If it's not
            'an operating lease, then use the residual field.
            If (LeaseType = "XX") Then
                'Operating Lease
                ResidValue = SalvageValue_dbl
                LeaseType_trans = "OpLse"
            Else
                If (GuarResid_dbl > 0) Then
                    ResidValue = GuarResid_dbl
                Else
                    'Capital Lease
                    ResidValue = Residual_dbl
                End If

                LeaseType_trans = "CapLse"
            End If

            '=== Determine the internal rate of return (IRR) to use ===
            'Rule - For hydra (Aero and Rail) the IRR is equal to AnnualPricingYield field.  For
            'all other portfolios:
            '   +If the Guaranteed Residual is greater than zero, then IRR equals
            '    the AnnualCombinedIRR field.  
            '   +If the Guaranteed Residual is less than zero and the AnnualFinanceIRR field is greater than
            '    1, the IRR equals the AnnualFinanceIRR field.
            '   +If the Guaranteed Residual is less than zero and the AnnualFinanceIRR field is less than 1, the
            '    IRR equals the AnnualCombinedIRR field.
            If (GuarResid_dbl > 0) Then
                IRR = AnnualCombinedIRR_dbl
            Else
                If (AnnualFinanceIRR_dbl > 1) Then
                    IRR = AnnualFinanceIRR_dbl
                Else
                    IRR = AnnualCombinedIRR_dbl
                End If
            End If

            '================================================================================
            ' Test 1 - Purchase Option $1 Buy Out (Ownership Transfer)
            'Criteria: If the Residual Value (ResidValue) is below the amount of
            '5.00 then test passed and the lease should be classified as a Capital
            'Lease
            '
            'Exceptions: Australia (which doesn't apply anymore) and for hydra 
            '(Aero and Rail) the RV value is at the end of the depreciation life,
            'not the end of the lease term which is what is needed for this test.
            'The end of lease term value is stored in a spreadsheet and used when they
            'analyze RV on a quarterly basis.  Thus, this test cannot be performed
            'for Hydra since the residual value in InfoLease is not the true RV.
            '================================================================================
            Dim Test1_Passed As String = ""

            If (ResidValue >= 0 And ResidValue <= 5) Then
                Test1_Passed = "Yes"
            Else
                Test1_Passed = "No"
            End If

            '================================================================================
            ' Test 2 - Residual Percentage Less than 5% (Bargain Purchase)
            'Criteria: The Residual Percentage (RP) is the guaranteed amount due at the
            'end of the lease (ResidValue) divided by the Total Equipment Cost 
            '(EquipmentCost) of the lease.  If the RP is below 5% then the test passed
            'and the lease should be classified as a Capital Lease.
            '
            'Exceptions: Australia (which doesn't apply anymore) and for hydra 
            '(Aero and Rail) the RV value is at the end of the depreciation life,
            'not the end of the lease term which is what is needed for this test.
            'The end of lease term value is stored in a spreadsheet and used when they
            'analyze RV on a quarterly basis.  Thus, this test cannot be performed
            'for Hydra since the residual value in InfoLease is not the true RV.
            '================================================================================
            Dim Test2_Passed As String = ""
            Dim ResidPct As Double

            If (LeaseType = "XX") Then
                ResidPct = (SalvageValue_dbl / EquipmentCost_dbl) * 100
            Else
                ResidPct = (GuarResid_dbl / EquipmentCost_dbl) * 100
            End If

            If (ResidPct < 5.01) Then
                Test2_Passed = "Yes"
            Else
                Test2_Passed = "No"
            End If

            '================================================================================
            ' Test 3 - Present Value of Minimum Lease Payments Greater than 90%
            '
            'Criteria: If the present value of minimum lease payments percentage (PVMLPP)
            'is greater than 90%, then the test is passed and the lease should be classified
            'as a Capital Lease.  The present value for this test is performed using the 
            'embedded present value function in VB.Net.
            '
            'Exceptions: None
            'Formula: PVMLPP = (Present Value / EquipmentCost) * 100
            'Where Present Value = PV(Rate, Nbr of Pay Periods, Pymt, Future Value, Type)
            '================================================================================
            Dim Test3_Passed As String = ""
            Dim PresentValue As Double
            Dim Rate As Double = CDbl((IRR / 100) / BillFreq_int)
            Dim Nbr_Pay_Per As Double = CDbl(ContractTerm_int / (12 / BillFreq_int))

            'Determine the contract payment
            'The formula for Pymt is as follows:
            'Pymt = Round(Pmt([Rate], [Nbr_Pay_Per], [pvFactor], [ResidualValue], [AdvArrears]), 2)            
            Dim Pymt As Double
            Dim pvFactor As Double = EquipmentCost_dbl * -1
            Dim AdvArrears As Int32
            If (PymtsArrears_int = 1) Then
                AdvArrears = 0
            Else
                AdvArrears = 1
            End If

            Pymt = Math.Round(Pmt(Rate, Nbr_Pay_Per, pvFactor, ResidValue, CType(AdvArrears, DueDate)), 2)

            'Calculate the present value
            PresentValue = -PV(Rate, Nbr_Pay_Per, Pymt, GuarResid_dbl, CType(AdvArrears, DueDate))

            'Finally, calculate the PVMLPP
            Dim PVMLPP As Double = Math.Round((PresentValue / EquipmentCost_dbl) * 100, 4)

            If (PVMLPP > 90.1) Then
                Test3_Passed = "Yes"
            Else
                Test3_Passed = "No"
            End If

            'Was lease misclassed?
            Dim ShouldBeLT As String
            Dim MisClassed As String

            If (Test1_Passed = "Yes" Or Test2_Passed = "Yes" Or Test3_Passed = "Yes") Then
                'Lease should be classified as a capital lease
                ShouldBeLT = "CapLse"
            Else
                'All no, should be OpLse
                ShouldBeLT = "OpLse"
            End If

            If (LeaseType_trans = ShouldBeLT) Then
                MisClassed = "No"
            Else
                MisClassed = "Yes"
            End If

            If (MisClassed = "Yes") Then
                'Write results to _FAS13 table in ATU server
                Dim insertStatement As String = "INSERT INTO atu.dbo._FAS13 (AODate,Server,LeaseNbr,Branch,BookingDate,LeaseType,FAS13LeaseType,GuarResid,Residual,SalvageValue," & _
                                                 "ResidValue_used_in_FAS13_calcs,EquipmentCost,IRR,Rate,Nbr_Pay_Per,Pymt,PvFactor,AdvArrears,PresentValue," & _
                                                 "PVMLPP,Test_1_Purchase_Option_1_Buy_Out,Test_2_Residual_Percentage_Less_than_5_Pct," & _
                                                 "Test_3_Present_Value_of_Minimum_Lease_Payments_Greater_than_90pct,LeaseShouldBe,Misclassed) VALUES (" & _
                                                 "'" & aodate & "','Asia_HKGSINMALPRC','" & LeaseNbr & "','" & Branch & "','" & BookingDate & "','" & LeaseType & "','" & LeaseType_trans & "'," & GuarResid_dbl & "," & Residual_dbl & "," & _
                                                 SalvageValue_dbl & "," & ResidValue & "," & EquipmentCost_dbl & "," & IRR & "," & Rate & "," & Nbr_Pay_Per & "," & _
                                                 Pymt & "," & pvFactor & "," & AdvArrears & "," & PresentValue & "," & PVMLPP & ",'" & Test1_Passed & "','" & Test2_Passed & "','" & _
                                                 Test3_Passed & "','" & ShouldBeLT & "','" & MisClassed & "')"

                Dim insertCommand As New SqlClient.SqlCommand(insertStatement, insertADONETConnection)
                insertCommand.ExecuteNonQuery()
            End If

        Loop

        '==================================================================================================
        'Note, they might want these results filtered by booking date.  Use the following query to do that:
        '   select a.*, b.bookingdate 
        '   from atu.dbo._fas13 as a, hydra_cf_leasemaster as b
        '   where(a.leasenbr = b.leasenbr)
        '   and bookingdate > '2011-01-01'
        ' *** This is no longer required, I've added BookingDate to the table, so filter on that ***
        '==================================================================================================
        reader.Close()
        myADONETConnection.Close()
        insertADONETConnection.Close()

        Dts.TaskResult = Dts.Results.Success
	End Sub

End Class]]></ProjectItem><ProjectItem Name="dts://Scripts/ScriptTask_b5d995ab80d1404daeb23a2a4dff32bf/ScriptTask_b5d995ab80d1404daeb23a2a4dff32bf.vsaproj">
<![CDATA[<VisualStudioProject>
    <VisualBasic
        Version = "8.0.50727.42"
        MVID = "{00000000-0000-0000-0000-000000000000}"
        ProjectType = "Local"
        ProductVersion = "8.0.50727"
        SchemaVersion = "2.0"
    >
        <Build>
            <Settings
                DefaultNamespace = "ScriptTask_b5d995ab80d1404daeb23a2a4dff32bf"
                OptionCompare = "0"
                OptionExplicit = "1"
                OptionStrict = "1"
                ProjectName = "ScriptTask_b5d995ab80d1404daeb23a2a4dff32bf"
                ReferencePath = "C:\WINDOWS\assembly\GAC_MSIL\Microsoft.SqlServer.ScriptTask\9.0.242.0__89845dcd8080cc91\;C:\WINDOWS\assembly\GAC_MSIL\Microsoft.SqlServer.ManagedDTS\9.0.242.0__89845dcd8080cc91\"
                TreatWarningsAsErrors = "false"
                WarningLevel = "1"
                RootNamespace = "ScriptTask_b5d995ab80d1404daeb23a2a4dff32bf"
            >
                <Config
                    Name = "Debug"
                    DefineConstants = ""
                    DefineDebug = "true"
                    DefineTrace = "true"
                    DebugSymbols = "true"
                    RemoveIntegerChecks = "false"
                />
            </Settings>
            <References>
                <Reference
                    Name = "System"
                    AssemblyName = "System"
                />
                <Reference
                    Name = "System.Data"
                    AssemblyName = "System.Data"
                />
                <Reference
                    Name = "Microsoft.SqlServer.ScriptTask"
                    AssemblyName = "Microsoft.SqlServer.ScriptTask"
                />
                <Reference
                    Name = "Microsoft.SqlServer.ManagedDTS"
                    AssemblyName = "Microsoft.SqlServer.ManagedDTS"
                />
            </References>
            <Imports>
                <Import Namespace = "Microsoft.VisualBasic" />
            </Imports>
        </Build>
        <Files>
            <Include>
                <File
                    RelPath = "ScriptMain"
                    BuildAction = "Compile"
                    ItemType = "2"
                />
                <VSAAppGlobal
                    VSAAppGlobalName = "Dts"
                    ItemType = "1"
                    VSAAppGlobalType = "Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptObjectModel"
                />
            </Include>
        </Files>
        <Folders>
            <Include/>
        </Folders>
    </VisualBasic>
</VisualStudioProject>]]></ProjectItem></ScriptProject></DTS:ObjectData></DTS:Executable>
<DTS:Executable DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=9.0.242.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" DTS:ThreadHint="0"><DTS:Property DTS:Name="ExecutionLocation">0</DTS:Property><DTS:Property DTS:Name="ExecutionAddress"></DTS:Property><DTS:Property DTS:Name="TaskContact"></DTS:Property><DTS:Property DTS:Name="ForceExecValue">0</DTS:Property><DTS:Property DTS:Name="ExecValue" DTS:DataType="3">0</DTS:Property><DTS:Property DTS:Name="ForceExecutionResult">-1</DTS:Property><DTS:Property DTS:Name="Disabled">-1</DTS:Property><DTS:Property DTS:Name="FailPackageOnFailure">0</DTS:Property><DTS:Property DTS:Name="FailParentOnFailure">0</DTS:Property><DTS:Property DTS:Name="MaxErrorCount">1</DTS:Property><DTS:Property DTS:Name="ISOLevel">1048576</DTS:Property><DTS:Property DTS:Name="LocaleID">-1</DTS:Property><DTS:Property DTS:Name="TransactionOption">1</DTS:Property><DTS:Property DTS:Name="DelayValidation">0</DTS:Property>
<DTS:LoggingOptions><DTS:Property DTS:Name="LoggingMode">0</DTS:Property><DTS:Property DTS:Name="FilterKind">1</DTS:Property><DTS:Property DTS:Name="EventFilter" DTS:DataType="8"></DTS:Property></DTS:LoggingOptions><DTS:Property DTS:Name="ObjectName">Asia - KORTWN</DTS:Property><DTS:Property DTS:Name="DTSID">{C868BCF2-A0E0-48DB-906E-D5F2555B6B3E}</DTS:Property><DTS:Property DTS:Name="Description">Perform FAS13 testing for the Asia - KORTWN (korea, tawain) instance.</DTS:Property><DTS:Property DTS:Name="CreationName">Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=9.0.242.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91</DTS:Property><DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property><DTS:ObjectData><ScriptProject Name="ScriptTask_ff73575477e449848a4c22709ded9428" Language="Microsoft Visual Basic .NET" EntryPoint="ScriptMain" SaveBinaries="False" ReadOnlyVariables="User::AODate" ReadWriteVariables=""><ProjectItem Name="dts://Scripts/ScriptTask_ff73575477e449848a4c22709ded9428/ScriptMain.vsaitem">
<![CDATA[' Microsoft SQL Server Integration Services Script Task
' Write scripts using Microsoft Visual Basic
' The ScriptMain class is the entry point of the Script Task.

Imports System
Imports System.Data
Imports System.Math
Imports Microsoft.SqlServer.Dts.Runtime
'Added to the default imports
Imports System.Windows.Forms
Imports System.Collections
'for SQL
Imports System.Data.SqlClient
'for PV
Imports Microsoft.VisualBasic

Public Class ScriptMain

	' The execution engine calls this method when the task executes.
	' To access the object model, use the Dts object. Connections, variables, events,
	' and logging features are available as static members of the Dts class.
	' Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
	' 
	' To open Code and Text Editor Help, press F1.
	' To open Object Browser, press Ctrl+Alt+J.

	Public Sub Main()
        'Get AODate
        Dim aodate As String = CStr(Dts.Variables("AODate").Value)

        ' Run a SQL query to get a population of leases to test - all leases that are not CS (conditional sale) or RA (revolving account) leases.
        Dim mySqlStatement As String
        mySqlStatement = "SELECT LeaseNbr,Branch,LeaseType,GuarResid,Residual,SalvageValue,AnnualCombinedIRR,AnnualFinanceIRR,EquipmentCost,BillFreq,ContractTerm,PymtsArrears,ContractPymt,BookingDate " & _
                         "FROM atu.dbo._asia_kortwn_leasemaster WHERE LeaseType not in ('RA','CS') and NumOfAssets > 0 and EquipmentCost > 0 and aodate = '" & aodate & "'"

        Dim myADONETConnection As SqlClient.SqlConnection = DirectCast(Dts.Connections("crplivatu01.ATU1").AcquireConnection(Dts.Transaction), SqlClient.SqlConnection)
        Dim myCommand As New SqlClient.SqlCommand(mySqlStatement, myADONETConnection)
        myCommand.CommandTimeout = 2000  'Set command timeout in seconds
        Dim reader As SqlDataReader = myCommand.ExecuteReader(CommandBehavior.CloseConnection)
        Dim insertADONETConnection As SqlClient.SqlConnection = DirectCast(Dts.Connections("crplivatu01.ATU1").AcquireConnection(Dts.Transaction), SqlClient.SqlConnection)

        Dim LeaseNbr As String
        Dim Branch As String
        Dim LeaseType As String
        Dim LeaseType_trans As String
        Dim GuarResid As String
        Dim GuarResid_dbl As Double
        Dim Residual As String
        Dim Residual_dbl As Double
        Dim SalvageValue As String
        Dim SalvageValue_dbl As Double
        Dim ResidValue As Double
        Dim AnnualCombinedIRR As String
        Dim AnnualCombinedIRR_dbl As Double
        Dim AnnualFinanceIRR As String
        Dim AnnualFinanceIRR_dbl As Double
        Dim EquipmentCost As String
        Dim EquipmentCost_dbl As Double
        Dim BillFreq As String
        Dim BillFreq_int As Int32
        Dim ContractTerm As String
        Dim ContractTerm_int As Int32
        Dim PymtsArrears As String
        Dim PymtsArrears_int As Int32
        Dim IRR As Double
        Dim BookingDate As String
        Dim message As String = "no message"

        Do While reader.Read()
            LeaseNbr = reader("LeaseNbr").ToString
            Branch = reader("Branch").ToString
            LeaseType = reader("LeaseType").ToString
            GuarResid = reader("GuarResid").ToString
            Residual = reader("Residual").ToString
            SalvageValue = reader("SalvageValue").ToString
            AnnualCombinedIRR = reader("AnnualCombinedIRR").ToString
            AnnualFinanceIRR = reader("AnnualFinanceIRR").ToString
            EquipmentCost = reader("EquipmentCost").ToString
            BillFreq = reader("BillFreq").ToString
            ContractTerm = reader("ContractTerm").ToString
            PymtsArrears = reader("PymtsArrears").ToString
            BookingDate = reader("BookingDate").ToString

            'Convert values to double, accounting for nulls
            If (GuarResid = "") Then
                GuarResid_dbl = CDbl(0)
            Else
                GuarResid_dbl = CDbl(GuarResid)
            End If

            If (Residual = "") Then
                Residual_dbl = CDbl(0)
            Else
                Residual_dbl = CDbl(Residual)
            End If

            If (SalvageValue = "") Then
                SalvageValue_dbl = CDbl(0)
            Else
                SalvageValue_dbl = CDbl(SalvageValue)
            End If

            If (AnnualCombinedIRR = "") Then
                AnnualCombinedIRR_dbl = CDbl(0)
            Else
                AnnualCombinedIRR_dbl = CDbl(AnnualCombinedIRR)
            End If

            If (AnnualFinanceIRR = "") Then
                AnnualFinanceIRR_dbl = CDbl(0)
            Else
                AnnualFinanceIRR_dbl = CDbl(AnnualFinanceIRR)
            End If

            If (EquipmentCost = "") Then
                EquipmentCost_dbl = CDbl(1) 'use 1 here to prevent div by 0 errors
            Else
                EquipmentCost_dbl = CDbl(EquipmentCost)
            End If

            If (BillFreq = "") Then
                BillFreq_int = CInt(1) 'use 1 here to prevent div by 0 errors
            Else
                BillFreq_int = CInt(BillFreq)
            End If

            If (ContractTerm = "") Then
                ContractTerm_int = CInt(1) 'use 1 here to prevent div by 0 errors
            Else
                ContractTerm_int = CInt(ContractTerm)
            End If

            If (PymtsArrears = "") Then
                PymtsArrears_int = CInt(0) 'use 1 here to prevent div by 0 errors
            Else
                PymtsArrears_int = CInt(PymtsArrears)
            End If

            '=== Determine the residual value to use ===
            'Rule - if GuarResid is greater than zero then use this field.  If not, then
            'if it's an operating lease (XX) use the salvage value field.  If it's not
            'an operating lease, then use the residual field.
            If (LeaseType = "XX") Then
                'Operating Lease
                ResidValue = SalvageValue_dbl
                LeaseType_trans = "OpLse"
            Else
                If (GuarResid_dbl > 0) Then
                    ResidValue = GuarResid_dbl
                Else
                    'Capital Lease
                    ResidValue = Residual_dbl
                End If

                LeaseType_trans = "CapLse"
            End If

            '=== Determine the internal rate of return (IRR) to use ===
            'Rule - For hydra (Aero and Rail) the IRR is equal to AnnualPricingYield field.  For
            'all other portfolios:
            '   +If the Guaranteed Residual is greater than zero, then IRR equals
            '    the AnnualCombinedIRR field.  
            '   +If the Guaranteed Residual is less than zero and the AnnualFinanceIRR field is greater than
            '    1, the IRR equals the AnnualFinanceIRR field.
            '   +If the Guaranteed Residual is less than zero and the AnnualFinanceIRR field is less than 1, the
            '    IRR equals the AnnualCombinedIRR field.
            If (GuarResid_dbl > 0) Then
                IRR = AnnualCombinedIRR_dbl
            Else
                If (AnnualFinanceIRR_dbl > 1) Then
                    IRR = AnnualFinanceIRR_dbl
                Else
                    IRR = AnnualCombinedIRR_dbl
                End If
            End If

            '================================================================================
            ' Test 1 - Purchase Option $1 Buy Out (Ownership Transfer)
            'Criteria: If the Residual Value (ResidValue) is below the amount of
            '5.00 then test passed and the lease should be classified as a Capital
            'Lease
            '
            'Exceptions: Australia (which doesn't apply anymore) and for hydra 
            '(Aero and Rail) the RV value is at the end of the depreciation life,
            'not the end of the lease term which is what is needed for this test.
            'The end of lease term value is stored in a spreadsheet and used when they
            'analyze RV on a quarterly basis.  Thus, this test cannot be performed
            'for Hydra since the residual value in InfoLease is not the true RV.
            '================================================================================
            Dim Test1_Passed As String = ""

            If (ResidValue >= 0 And ResidValue <= 5) Then
                Test1_Passed = "Yes"
            Else
                Test1_Passed = "No"
            End If

            '================================================================================
            ' Test 2 - Residual Percentage Less than 5% (Bargain Purchase)
            'Criteria: The Residual Percentage (RP) is the guaranteed amount due at the
            'end of the lease (ResidValue) divided by the Total Equipment Cost 
            '(EquipmentCost) of the lease.  If the RP is below 5% then the test passed
            'and the lease should be classified as a Capital Lease.
            '
            'Exceptions: Australia (which doesn't apply anymore) and for hydra 
            '(Aero and Rail) the RV value is at the end of the depreciation life,
            'not the end of the lease term which is what is needed for this test.
            'The end of lease term value is stored in a spreadsheet and used when they
            'analyze RV on a quarterly basis.  Thus, this test cannot be performed
            'for Hydra since the residual value in InfoLease is not the true RV.
            '================================================================================
            Dim Test2_Passed As String = ""
            Dim ResidPct As Double

            If (LeaseType = "XX") Then
                ResidPct = (SalvageValue_dbl / EquipmentCost_dbl) * 100
            Else
                ResidPct = (GuarResid_dbl / EquipmentCost_dbl) * 100
            End If

            If (ResidPct < 5.01) Then
                Test2_Passed = "Yes"
            Else
                Test2_Passed = "No"
            End If

            '================================================================================
            ' Test 3 - Present Value of Minimum Lease Payments Greater than 90%
            '
            'Criteria: If the present value of minimum lease payments percentage (PVMLPP)
            'is greater than 90%, then the test is passed and the lease should be classified
            'as a Capital Lease.  The present value for this test is performed using the 
            'embedded present value function in VB.Net.
            '
            'Exceptions: None
            'Formula: PVMLPP = (Present Value / EquipmentCost) * 100
            'Where Present Value = PV(Rate, Nbr of Pay Periods, Pymt, Future Value, Type)
            '================================================================================
            Dim Test3_Passed As String = ""
            Dim PresentValue As Double
            Dim Rate As Double = CDbl((IRR / 100) / BillFreq_int)
            Dim Nbr_Pay_Per As Double = CDbl(ContractTerm_int / (12 / BillFreq_int))

            'Determine the contract payment
            'The formula for Pymt is as follows:
            'Pymt = Round(Pmt([Rate], [Nbr_Pay_Per], [pvFactor], [ResidualValue], [AdvArrears]), 2)            
            Dim Pymt As Double
            Dim pvFactor As Double = EquipmentCost_dbl * -1
            Dim AdvArrears As Int32
            If (PymtsArrears_int = 1) Then
                AdvArrears = 0
            Else
                AdvArrears = 1
            End If

            Pymt = Math.Round(Pmt(Rate, Nbr_Pay_Per, pvFactor, ResidValue, CType(AdvArrears, DueDate)), 2)

            'Calculate the present value
            PresentValue = -PV(Rate, Nbr_Pay_Per, Pymt, GuarResid_dbl, CType(AdvArrears, DueDate))

            'Finally, calculate the PVMLPP
            Dim PVMLPP As Double = Math.Round((PresentValue / EquipmentCost_dbl) * 100, 4)

            If (PVMLPP > 90.1) Then
                Test3_Passed = "Yes"
            Else
                Test3_Passed = "No"
            End If

            'Was lease misclassed?
            Dim ShouldBeLT As String
            Dim MisClassed As String

            If (Test1_Passed = "Yes" Or Test2_Passed = "Yes" Or Test3_Passed = "Yes") Then
                'Lease should be classified as a capital lease
                ShouldBeLT = "CapLse"
            Else
                'All no, should be OpLse
                ShouldBeLT = "OpLse"
            End If

            If (LeaseType_trans = ShouldBeLT) Then
                MisClassed = "No"
            Else
                MisClassed = "Yes"
            End If

            If (MisClassed = "Yes") Then
                'Write results to _FAS13 table in ATU server
                Dim insertStatement As String = "INSERT INTO atu.dbo._FAS13 (AODate,Server,LeaseNbr,Branch,BookingDate,LeaseType,FAS13LeaseType,GuarResid,Residual,SalvageValue," & _
                                                 "ResidValue_used_in_FAS13_calcs,EquipmentCost,IRR,Rate,Nbr_Pay_Per,Pymt,PvFactor,AdvArrears,PresentValue," & _
                                                 "PVMLPP,Test_1_Purchase_Option_1_Buy_Out,Test_2_Residual_Percentage_Less_than_5_Pct," & _
                                                 "Test_3_Present_Value_of_Minimum_Lease_Payments_Greater_than_90pct,LeaseShouldBe,Misclassed) VALUES (" & _
                                                 "'" & aodate & "','Asia_KORTWN','" & LeaseNbr & "','" & Branch & "','" & BookingDate & "','" & LeaseType & "','" & LeaseType_trans & "'," & GuarResid_dbl & "," & Residual_dbl & "," & _
                                                 SalvageValue_dbl & "," & ResidValue & "," & EquipmentCost_dbl & "," & IRR & "," & Rate & "," & Nbr_Pay_Per & "," & _
                                                 Pymt & "," & pvFactor & "," & AdvArrears & "," & PresentValue & "," & PVMLPP & ",'" & Test1_Passed & "','" & Test2_Passed & "','" & _
                                                 Test3_Passed & "','" & ShouldBeLT & "','" & MisClassed & "')"

                Dim insertCommand As New SqlClient.SqlCommand(insertStatement, insertADONETConnection)
                insertCommand.ExecuteNonQuery()
            End If

        Loop

        '==================================================================================================
        'Note, they might want these results filtered by booking date.  Use the following query to do that:
        '   select a.*, b.bookingdate 
        '   from atu.dbo._fas13 as a, hydra_cf_leasemaster as b
        '   where(a.leasenbr = b.leasenbr)
        '   and bookingdate > '2011-01-01'
        ' *** This is no longer required, I've added BookingDate to the table, so filter on that ***
        '==================================================================================================
        reader.Close()
        myADONETConnection.Close()
        insertADONETConnection.Close()

        Dts.TaskResult = Dts.Results.Success
	End Sub

End Class]]></ProjectItem><ProjectItem Name="dts://Scripts/ScriptTask_ff73575477e449848a4c22709ded9428/ScriptTask_ff73575477e449848a4c22709ded9428.vsaproj">
<![CDATA[<VisualStudioProject>
    <VisualBasic
        Version = "8.0.50727.42"
        MVID = "{00000000-0000-0000-0000-000000000000}"
        ProjectType = "Local"
        ProductVersion = "8.0.50727"
        SchemaVersion = "2.0"
    >
        <Build>
            <Settings
                DefaultNamespace = "ScriptTask_ff73575477e449848a4c22709ded9428"
                OptionCompare = "0"
                OptionExplicit = "1"
                OptionStrict = "1"
                ProjectName = "ScriptTask_ff73575477e449848a4c22709ded9428"
                ReferencePath = "C:\WINDOWS\assembly\GAC_MSIL\Microsoft.SqlServer.ScriptTask\9.0.242.0__89845dcd8080cc91\;C:\WINDOWS\assembly\GAC_MSIL\Microsoft.SqlServer.ManagedDTS\9.0.242.0__89845dcd8080cc91\"
                TreatWarningsAsErrors = "false"
                WarningLevel = "1"
                RootNamespace = "ScriptTask_ff73575477e449848a4c22709ded9428"
            >
                <Config
                    Name = "Debug"
                    DefineConstants = ""
                    DefineDebug = "true"
                    DefineTrace = "true"
                    DebugSymbols = "true"
                    RemoveIntegerChecks = "false"
                />
            </Settings>
            <References>
                <Reference
                    Name = "System"
                    AssemblyName = "System"
                />
                <Reference
                    Name = "System.Data"
                    AssemblyName = "System.Data"
                />
                <Reference
                    Name = "Microsoft.SqlServer.ScriptTask"
                    AssemblyName = "Microsoft.SqlServer.ScriptTask"
                />
                <Reference
                    Name = "Microsoft.SqlServer.ManagedDTS"
                    AssemblyName = "Microsoft.SqlServer.ManagedDTS"
                />
            </References>
            <Imports>
                <Import Namespace = "Microsoft.VisualBasic" />
            </Imports>
        </Build>
        <Files>
            <Include>
                <File
                    RelPath = "ScriptMain"
                    BuildAction = "Compile"
                    ItemType = "2"
                />
                <VSAAppGlobal
                    VSAAppGlobalName = "Dts"
                    ItemType = "1"
                    VSAAppGlobalType = "Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptObjectModel"
                />
            </Include>
        </Files>
        <Folders>
            <Include/>
        </Folders>
    </VisualBasic>
</VisualStudioProject>]]></ProjectItem></ScriptProject></DTS:ObjectData></DTS:Executable>
<DTS:PrecedenceConstraint><DTS:Property DTS:Name="Value">0</DTS:Property><DTS:Property DTS:Name="EvalOp">2</DTS:Property><DTS:Property DTS:Name="LogicalAnd">-1</DTS:Property><DTS:Property DTS:Name="Expression"></DTS:Property><DTS:Executable IDREF="{00E5B116-4EFE-47FA-BB19-60338DEFDE72}" DTS:IsFrom="-1"/><DTS:Executable IDREF="{D4A0BE0C-8536-4D88-A6E4-81DB48197FED}" DTS:IsFrom="0"/><DTS:Property DTS:Name="ObjectName">Constraint</DTS:Property><DTS:Property DTS:Name="DTSID">{8B73DC74-B7CC-41F0-A863-3C63E89DBED0}</DTS:Property><DTS:Property DTS:Name="Description"></DTS:Property><DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PrecedenceConstraint>
<DTS:PrecedenceConstraint><DTS:Property DTS:Name="Value">0</DTS:Property><DTS:Property DTS:Name="EvalOp">2</DTS:Property><DTS:Property DTS:Name="LogicalAnd">-1</DTS:Property><DTS:Property DTS:Name="Expression"></DTS:Property><DTS:Executable IDREF="{D4A0BE0C-8536-4D88-A6E4-81DB48197FED}" DTS:IsFrom="-1"/><DTS:Executable IDREF="{4862020B-0550-47A4-A319-AC0530A0984D}" DTS:IsFrom="0"/><DTS:Property DTS:Name="ObjectName">Constraint 1</DTS:Property><DTS:Property DTS:Name="DTSID">{43754DED-48AF-41DC-8085-216BEFF99237}</DTS:Property><DTS:Property DTS:Name="Description"></DTS:Property><DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PrecedenceConstraint>
<DTS:PrecedenceConstraint><DTS:Property DTS:Name="Value">0</DTS:Property><DTS:Property DTS:Name="EvalOp">2</DTS:Property><DTS:Property DTS:Name="LogicalAnd">-1</DTS:Property><DTS:Property DTS:Name="Expression"></DTS:Property><DTS:Executable IDREF="{4862020B-0550-47A4-A319-AC0530A0984D}" DTS:IsFrom="-1"/><DTS:Executable IDREF="{822DC3FA-999A-4EB5-972A-224058B4494B}" DTS:IsFrom="0"/><DTS:Property DTS:Name="ObjectName">Constraint 2</DTS:Property><DTS:Property DTS:Name="DTSID">{230E7E3B-BC3A-4EC4-9D84-E1396BBA7B83}</DTS:Property><DTS:Property DTS:Name="Description"></DTS:Property><DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PrecedenceConstraint>
<DTS:PrecedenceConstraint><DTS:Property DTS:Name="Value">0</DTS:Property><DTS:Property DTS:Name="EvalOp">2</DTS:Property><DTS:Property DTS:Name="LogicalAnd">-1</DTS:Property><DTS:Property DTS:Name="Expression"></DTS:Property><DTS:Executable IDREF="{822DC3FA-999A-4EB5-972A-224058B4494B}" DTS:IsFrom="-1"/><DTS:Executable IDREF="{E18E0CB6-A293-4314-B206-F9F44B960594}" DTS:IsFrom="0"/><DTS:Property DTS:Name="ObjectName">Constraint 3</DTS:Property><DTS:Property DTS:Name="DTSID">{E7A384A6-94D4-42F9-94F4-4847585D87CF}</DTS:Property><DTS:Property DTS:Name="Description"></DTS:Property><DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PrecedenceConstraint>
<DTS:PrecedenceConstraint><DTS:Property DTS:Name="Value">0</DTS:Property><DTS:Property DTS:Name="EvalOp">2</DTS:Property><DTS:Property DTS:Name="LogicalAnd">-1</DTS:Property><DTS:Property DTS:Name="Expression"></DTS:Property><DTS:Executable IDREF="{E18E0CB6-A293-4314-B206-F9F44B960594}" DTS:IsFrom="-1"/><DTS:Executable IDREF="{C868BCF2-A0E0-48DB-906E-D5F2555B6B3E}" DTS:IsFrom="0"/><DTS:Property DTS:Name="ObjectName">Constraint 4</DTS:Property><DTS:Property DTS:Name="DTSID">{FF85E166-0A32-4CE7-B3D0-2FE0D499387A}</DTS:Property><DTS:Property DTS:Name="Description"></DTS:Property><DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PrecedenceConstraint><DTS:Property DTS:Name="ObjectName">FAS13 Testing Section</DTS:Property><DTS:Property DTS:Name="DTSID">{EF173B76-7A3D-4D40-A28F-3A26C6BA03AA}</DTS:Property><DTS:Property DTS:Name="Description">Sequence Container</DTS:Property><DTS:Property DTS:Name="CreationName">STOCK:SEQUENCE</DTS:Property><DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property></DTS:Executable>
<DTS:PrecedenceConstraint><DTS:Property DTS:Name="Value">0</DTS:Property><DTS:Property DTS:Name="EvalOp">2</DTS:Property><DTS:Property DTS:Name="LogicalAnd">-1</DTS:Property><DTS:Property DTS:Name="Expression"></DTS:Property><DTS:Executable IDREF="{65745A3F-6EC8-4B29-A0B4-2E4ABEBE1CF1}" DTS:IsFrom="-1"/><DTS:Executable IDREF="{EF173B76-7A3D-4D40-A28F-3A26C6BA03AA}" DTS:IsFrom="0"/><DTS:Property DTS:Name="ObjectName">Constraint</DTS:Property><DTS:Property DTS:Name="DTSID">{1AE5BFC0-9FC9-4C9E-8A4C-CE08C56C1B18}</DTS:Property><DTS:Property DTS:Name="Description"></DTS:Property><DTS:Property DTS:Name="CreationName"></DTS:Property></DTS:PrecedenceConstraint><DTS:Property DTS:Name="ObjectName">FAS13</DTS:Property><DTS:Property DTS:Name="DTSID">{ED4A7703-A36F-4EAD-84C3-EA163DE6E137}</DTS:Property><DTS:Property DTS:Name="Description"></DTS:Property><DTS:Property DTS:Name="CreationName">MSDTS.Package.1</DTS:Property><DTS:Property DTS:Name="DisableEventHandlers">0</DTS:Property></DTS:Executable>